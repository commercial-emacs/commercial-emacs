GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2022-2024 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to 'bug-gnu-emacs@gnu.org'.
If possible, use 'M-x report-emacs-bug'.

This file is about changes in Emacs version 31.

See file HISTORY for a list of GNU Emacs versions and release dates.
See files NEWS.30, NEWS.29, ..., NEWS.18, and NEWS.1-17 for changes
in older Emacs versions.

You can narrow news to a specific version by calling 'view-emacs-news'
with a prefix argument or by typing 'C-u C-h C-n'.

Temporary note:
+++ indicates that all relevant manuals in doc/ have been updated.
--- means no change in the manuals is needed.
When you add a new item, use the appropriate mark if you are sure it
applies, and please also update docstrings as needed.


* Installation Changes in Emacs 31.1

---
** Native compilation is now enabled by default.
'configure' will enable the Emacs Lisp native compiler, so long as
libgccjit is present and functional on the system.  To disable native
compilation, configure Emacs with the option:

    ./configure --with-native-compilation=no

+++
** Emacs has been ported to the Android operating system.
This requires Emacs to be compiled on another computer.  The Android
NDK, SDK, and a suitable Java compiler must also be installed.

See the file "java/INSTALL" for more details.

---
** Native JSON support is now always available; libjansson is no longer used.
No external library is required.  The '--with-json' configure option has
been removed.  'json-available-p' now always returns non-nil and is only
kept for compatibility.

---
** Emacs now defaults to the ossaudio library for sound on NetBSD and OpenBSD.
Previously, configure used ALSA libraries if installed on the system
when configured '--with-sound=yes' (which is the default), with fallback
to libossaudio.  The libossaudio library included with the base system
is now used even if ALSA is found to avoid relying on external packages
and to resolve potential incompatibilities between GNU/Linux and *BSD
versions of ALSA.  Use '--with-sound=alsa' to build with ALSA on these
operating systems instead.


* Startup Changes in Emacs 30.1

---
** On GNU/Linux, Emacs is now the default application for 'org-protocol'.
Org mode provides a way to quickly capture bookmarks, notes, and links
using 'emacsclient':

    emacsclient "org-protocol://store-link?url=URL&title=TITLE"

A companion variable 'large-hscroll-threshold' controls when another
set of display optimizations are in effect, which are aimed
specifically at speeding up display of long lines that are truncated.

If you still experience slowdowns while editing files with long lines,
this may be due to line truncation, or to one of the enabled minor
modes, or to the current major mode.  Try turning off line truncation
with 'C-x x t', or try disabling all known slow minor modes with
'M-x so-long-minor-mode', or try disabling both known slow minor modes
and the major mode with 'M-x so-long-mode', or visit the file with
'M-x find-file-literally' instead of the usual 'C-x C-f'.

Note that the display optimizations in these cases may cause the
buffer to be occasionally mis-fontified.

The new function 'long-line-optimizations-p' returns non-nil when
these optimizations are in effect in the current buffer.

+++
** New command to change the font size globally.
To increase the font size, type 'C-x C-M-+' or 'C-x C-M-='; to
decrease it, type 'C-x C-M--'; to restore the font size, type 'C-x
C-M-0'.  The final key in these commands may be repeated without the
leading 'C-x' and without the modifiers, e.g. 'C-x C-M-+ C-M-+ C-M-+'
and 'C-x C-M-+ + +' increase the font size by three steps.  When
'mouse-wheel-mode' is enabled, 'C-M-wheel-up' and 'C-M-wheel-down' also
increase and decrease the font size globally.  Additionally, the
user option 'global-text-scale-adjust-resizes-frames' controls whether
the frames are resized when the font size is changed.

** New config variable 'syntax-wholeline-max' to reduce the cost of long lines.
This variable is used by some operations (mostly syntax-propertization
and font-locking) to treat lines longer than this variable as if they
were made up of various smaller lines.  This can help reduce the
slowdowns seen in buffers made of a single long line, but can also
cause misbehavior in the presence of such long lines (tho most of that
misbehavior should usually be limited to mis-highlighting).  You can
recover the previous behavior with:

    (setq syntax-wholeline-max most-positive-fixnum)

---
** New bindings in 'find-function-setup-keys' for 'find-library'.
When 'find-function-setup-keys' is enabled, 'C-x L' is now bound to
'find-library', 'C-x 4 L' is now bound to 'find-library-other-window'
and 'C-x 5 L' is now bound to 'find-library-other-frame'.

+++
** New key binding after 'M-x' or 'M-X': 'M-X'.
Emacs allows different completion predicates to be used with 'M-x'
(i.e., 'execute-extended-command') via the
'read-extended-command-predicate' user option.  Emacs also has the
'M-X' (note upper case) command, which only displays commands
especially relevant to the current buffer.  Emacs now allows toggling
between these modes while the user is inputting a command by hitting
'M-X' while in the minibuffer.

---
** Interactively, 'kill-buffer' will now offer to save the buffer if unsaved.

---
** New commands 'duplicate-line' and 'duplicate-dwim'.
'duplicate-line' duplicates the current line the specified number of times.
'duplicate-dwim' duplicates the region if it is active.  If not, it
works like 'duplicate-line'.  An active rectangular region is
duplicated on its right-hand side.

---
** Files with the ".eld" extension are now visited in 'lisp-data-mode'.

+++
** 'network-lookup-address-info' can now check numeric IP address validity.
Specifying 'numeric' as the new optional 'hints' argument makes it
check if the passed address is a valid IPv4/IPv6 address (without DNS
traffic).

    (network-lookup-address-info "127.1" 'ipv4 'numeric)
    => ([127 0 0 1 0])

+++
** New command 'find-sibling-file'.
This command jumps to a file considered a "sibling file", which is
determined according to the new user option 'find-sibling-rules'.

+++
** New user option 'delete-selection-temporary-region'.
When non-nil, 'delete-selection-mode' will only delete the temporary
regions (usually set by mouse-dragging or shift-selection).

+++
** New user option 'switch-to-prev-buffer-skip-regexp'.
This should be a regexp or a list of regexps; buffers whose names
match those regexps will be ignored by 'switch-to-prev-buffer' and
'switch-to-next-buffer'.

+++
** New command 'rename-visited-file'.
This command renames the file visited by the current buffer by moving
it to a new location, and also makes the buffer visit this new file.

** Menus

---
*** The entries following the buffers in the "Buffers" menu can now be altered.
Change the 'menu-bar-buffers-menu-command-entries' variable to alter
the entries that follow the buffer list.

---
** 'delete-process' is now a command.
When called interactively, it will kill the process running in the
current buffer (if any).  This can be useful if you have runaway
output in the current buffer (from a process or a network connection),
and want to stop it.

+++
** New command 'restart-emacs'.
This is like 'save-buffers-kill-emacs', but instead of just killing
the current Emacs process at the end, it starts a new Emacs process
(using the same command line arguments as the running Emacs process).
'kill-emacs' and 'save-buffers-kill-emacs' have also gained new
optional parameters to restart instead of just killing the current
process.

+++
** New user option 'mouse-drag-mode-line-buffer'.
If non-nil, dragging on the buffer name part of the mode-line will
drag the buffer's associated file to other programs.  This option is
currently only available on X, Haiku and Nextstep (GNUstep or macOS).

+++
** New user option 'mouse-drag-and-drop-region-cross-program'.
If non-nil, this option allows dragging text in the region from Emacs
to another program.

---
** New user option 'mouse-drag-and-drop-region-scroll-margin'.
If non-nil, this option allows scrolling a window while dragging text
around without a scroll wheel.

+++
*** The value of 'mouse-drag-copy-region' can now be the symbol 'non-empty'.
This prevents mouse drag gestures from putting empty strings onto the
kill ring.

+++
** New user options 'dnd-indicate-insertion-point' and 'dnd-scroll-margin'.
These options allow adjusting point and scrolling a window when
dragging items from another program.

+++
** The X Direct Save (XDS) protocol is now supported.
This means dropping an image or file link from programs such as
Firefox will no longer create a temporary file in a random directory,
instead asking you where to save the file first.

+++
** New user option 'record-all-keys'.
If non-nil, this option will force recording of all input keys,
including those typed in response to passwords prompt (this was the
previous behavior).  The default is nil, which inhibits recording of
passwords.

+++
** New function 'command-query'.
This function makes its argument command prompt the user for
confirmation before executing.

+++
** The 'disabled' property of a command's symbol can now be a list.
The first element of the list should be the symbol 'query', which will
cause the command disabled this way prompt the user with a y/n or a
yes/no question before executing.  The new function 'command-query' is
a convenient method of making commands disabled in this way.

---
** 'count-words' will now report buffer totals if given a prefix.
Without a prefix, it will only report the word count for the narrowed
part of the buffer.

+++
** 'count-words' will now report sentence count when used interactively.

---
** New user option 'find-library-include-other-files'.
If set to nil, commands like 'find-library' will only include library
files in the completion candidates.  The default is t, which preserves
previous behavior, whereby non-library files could also be included.

+++
** New command 'sqlite-mode-open-file' for examining an sqlite3 file.
This uses the new 'sqlite-mode' which allows listing the tables in a
DB file, and examining and modifying the columns and the contents of
those tables.

---
** 'write-file' will now copy some file mode bits.
If the current buffer is visiting a file that is executable, the
'C-x C-w' command will now make the new file executable, too.

+++
** New user option 'process-error-pause-time'.
This determines how long to pause Emacs after a process
filter/sentinel error has been handled.

+++
** New faces for font-lock.
These faces are primarily meant for use with tree-sitter. They are:
'font-lock-bracket-face', 'font-lock-delimiter-face',
'font-lock-escape-face', 'font-lock-number-face',
'font-lock-misc-punctuation-face', 'font-lock-operator-face',
'font-lock-property-face', 'font-lock-punctuation-face'.

+++
** New face 'variable-pitch-text'.
This face is like 'variable-pitch' (from which it inherits), but is
slightly larger, which should help with the visual size differences
between the default, non-proportional font and proportional fonts when
mixed.

+++
** New face 'mode-line-active'.
This inherits from the 'mode-line' face, but is the face actually used
on the mode lines (along with 'mode-line-inactive').

+++
** New face attribute pseudo-value 'reset'.
This value stands for the value of the corresponding attribute of the
'default' face.  It can be used to reset attribute values produced by
inheriting from other faces.

+++
** New X resource: "borderThickness".
This controls the thickness of the external borders of the menu bars
and pop-up menus.

+++
** New X resource: "inputStyle".
This controls the style of the pre-edit and status areas of X input
methods.

+++
** New X resources: "highlightForeground" and "highlightBackground".
Only in the Lucid build, this controls colors used for highlighted
menu item widgets.

+++
** On X, Emacs now tries to synchronize window resize with the window manager.
This leads to less flicker and empty areas of a frame being displayed
when a frame is being resized.  Unfortunately, it does not work on
some ancient buggy window managers, so if Emacs appears to freeze, but
is still responsive to input, you can turn it off by setting the X
resource "synchronizeResize" to "off".

+++
** On X, Emacs can optionally synchronize display with the graphics hardware.
When this is enabled by setting the X resource "synchronizeResize" to
"extended", frame content "tearing" is drastically reduced.  This is
only supported on the Motif, Lucid, and no-toolkit builds, and
requires an X compositing manager supporting the extended frame
synchronization protocol (see
https://fishsoup.net/misc/wm-spec-synchronization.html).

This behavior can be toggled on and off via the frame parameter
'use-frame-synchronization'.

+++
** New frame parameter 'alpha-background' and X resource "alphaBackground".
This controls the opacity of the text background when running on a
composited display.

+++
** New frame parameter 'shaded'.
With window managers which support this, it controls whether or not a
frame's contents will be hidden, leaving only the title bar on display.

---
** New user option 'x-gtk-use-native-input'.
This controls whether or not GTK input methods are used by Emacs,
instead of XIM input methods.

+++
** New user option 'use-system-tooltips'.
This controls whether to use the toolkit tooltips, or Emacs's own
native implementation of tooltips as small frames.  This option is
only meaningful if Emacs was built with GTK+, Nextstep, or Haiku
support, and defaults to t, which makes Emacs use the toolkit
tooltips.  The existing GTK-specific option
'x-gtk-use-system-tooltips' is now an alias of this new option.

+++
** Non-native tooltips are now supported on Nextstep.
This means Emacs built with GNUstep or built on macOS is now able to
display different faces and images inside tooltips when the
'use-system-tooltips' user option is nil.

** Connection-local variables

+++
*** Some connection-local variables are now user options.
The variables 'connection-local-profile-alist' and
'connection-local-criteria-alist' are now user options, in order to
make it more convenient to inspect and modify them.

+++
*** The default connection-local application can be changed temporarily.
Running 'with-connection-local-variables' defaults to application
'tramp'.  This can be changed by let-binding
'connection-local-default-application' to another symbol.  This is
useful when running code in a buffer where Tramp has already set some
connection-local variables.

---
** New minor mode 'pixel-scroll-precision-mode'.
When enabled, and if your mouse supports it, you can scroll the
display up or down at pixel resolution, according to what your mouse
wheel reports.  Unlike 'pixel-scroll-mode', this mode scrolls the
display pixel-by-pixel, as opposed to only animating line-by-line
scrolls.

** Terminal Emacs

---
*** Emacs will now use 24-bit colors on terminals that support "Tc" capability.
This is in addition to previously-supported ways of discovering 24-bit
color support: either via the "RGB" or "setf24" capabilities, or if
the 'COLORTERM' environment variable is set to the value "truecolor".

*** Select active regions with xterm selection support.
On terminals with xterm setSelection support, the active region may be
saved to the X primary selection, following the
'select-active-regions' variable.  This support is enabled when
'tty-select-active-regions' is non-nil.

---
*** New command to set up display of unsupported characters.
The new command 'standard-display-by-replacement-char' produces Lisp
code that sets up the 'standard-display-table' to use a replacement
character for display of characters that the text-mode terminal
doesn't support.  It is most useful with the Linux console and similar
terminals, where Emacs has a reliable way of determining which
characters have glyphs in the font loaded into the terminal's memory.

---
*** New functions to set terminal output buffer size.
The new functions 'tty--set-output-buffer-size' and
'tty--output-buffer-size' allow setting and retrieving the output
buffer size of a terminal device.  The default buffer size is and has
always been BUFSIZ, which is defined in your system's stdio.h.  When
you set a buffer size with 'tty--set-output-buffer-size', this also
prevents Emacs from explicitly flushing the tty output stream, except
at the end of display update.

** ERT

+++
*** New ERT variables 'ert-batch-print-length' and 'ert-batch-print-level'.
These variables will override 'print-length' and 'print-level' when
printing Lisp values in ERT batch test results.

---
*** Redefining an ERT test in batch mode now signals an error.
Executing 'ert-deftest' with the same name as an existing test causes
the previous definition to be discarded, which was probably not
intended when this occurs in batch mode.  To remedy the error, rename
tests so that they all have unique names.

+++
*** ERT can generate JUnit test reports.
When environment variable 'EMACS_TEST_JUNIT_REPORT' is set, ERT
generates a JUnit test report under this file name.  This is useful
for Emacs integration into CI/CD test environments.

---
*** Unbound test symbols now signal an 'ert-test-unbound' error.
This affects the 'ert-select-tests' function and its callers.

** Emoji

+++
*** Emacs now has several new methods for inserting Emojis.
The Emoji commands are under the new 'C-x 8 e' prefix.

+++
*** New command 'emoji-insert' (bound to 'C-x 8 e e' and 'C-x 8 e i').
This command guides you through various Emoji categories and
combinations in a graphical menu system.

+++
*** New command 'emoji-search' (bound to 'C-x 8 e s').
This command lets you search for Emojis based on names.

+++
*** New command 'emoji-list' (bound to 'C-x 8 e l').
This command lists all Emojis (categorized by themes) in a special
buffer and lets you choose one of them.

---
*** New command 'emoji-recent' (bound to 'C-x 8 e r').
This command lets you choose among the Emojis you have recently
inserted.

+++
** New variable lets Lisp code read emacsclient arguments.
When '--eval' is passed to emacsclient and Emacs is evaluating each
argument, the new variable 'server-eval-args-left' is set to those
arguments not yet evaluated.  It can be used by Lisp code to 'pop'
arguments and process them by the function called in the '--eval'
expression, which is useful when those arguments contain arbitrary
characters that otherwise might require elaborate and error-prone
escaping (to protect them from the shell).

---
** "find-func.el" commands now have history enabled.
The 'find-function', 'find-library', 'find-face-definition', and
'find-variable' commands now allow retrieving previous input using the
usual minibuffer history commands.  Each command has a separate history.

---
** New minor mode find-function-mode replaces the old find-function-setup-keys.

** Minibuffer and Completions

+++
*** New user option 'completion-pcm-leading-wildcard'.
This option configures how the partial-completion style does completion.
It defaults to nil, which preserves the existing behavior.  When it is set
to t, the partial-completion style behaves more like the substring
style, in that a string being completed can match against a candidate
anywhere in the candidate string.

+++
*** 'completion-styles' now can contain lists of bindings.
In addition to being a symbol naming a completion style, an element of
'completion-styles' can now be a list of the form '(STYLE ((VARIABLE
VALUE) ...))' where STYLE is a symbol naming a completion style.
VARIABLE will be bound to VALUE (without evaluating it) while the style
is executing.  This allows multiple references to the same style with
different values for completion-affecting variables like
'completion-pcm-leading-wildcard' or 'completion-ignore-case'.  This also
applies for the styles configuration in 'completion-category-overrides'
and 'completion-category-defaults'.

** Windows

+++
*** New hook 'window-deletable-functions'.
This abnormal hook gives its client a way to save a window from getting
deleted implicitly by functions like 'kill-buffer', 'bury-buffer' and
'quit-restore-window'.

+++
*** New user option 'kill-buffer-quit-windows'.
This option has 'kill-buffer' call 'quit-restore-window' to handle the
further destiny of any window showing the buffer to be killed.

+++
*** New window parameter 'quit-restore-prev'.
This parameter is set up by 'display-buffer' when it detects that the
window used already has a 'quit-restore' parameter.  Its presence gives
'quit-restore-window' a way to undo a sequence of buffer display
operations more intuitively.

+++
*** 'quit-restore-window' handles new values for BURY-OR-KILL argument.
The values 'killing' and 'burying' are like 'kill' and 'bury' but assume
that the actual killing or burying of the buffer is done by the caller.

+++
*** New user option 'quit-restore-window-no-switch'.
With this option set, 'quit-restore-window' will delete its window more
aggressively rather than switching to some other buffer in it.

** Frames

+++
*** New function 'frame-deletable-p'.
Calling this function before 'delete-frame' is useful to avoid that the
latter throws an error when the argument FRAME cannot be deleted.

** Tab Bars and Tab Lines

---
*** New abnormal hook 'tab-bar-auto-width-functions'.
This hook allows you to control which tab-bar tabs are auto-resized.

** Project

---
*** New command 'project-root-find-file'.
It is equivalent to running ‘project-any-command’ with ‘find-file’.

** Registers

*** New functions 'buffer-to-register' and 'file-to-register'.
These allow users to interactively store file and buffers in registers.
Killed buffers stored in a register using buffer-to-register are
automatically converted to a file-query value if the buffer was visiting
a file.


* Editing Changes in Emacs 31.1

** Commands for keyboard translation.
`key-translate' is now interactive.  It prompts for a key to translate
from, and another to translate to, and sets `keyboard-translate-table'.
The new command `key-translate-remove' prompts for a key/translation
pair with completing-read, and removes it from the translation table.

** Internationalization

---
*** Emacs now supports Unicode version 16.0.

---
*** New language-environment and input method for Tifinagh.
The Tifinagh script is used to write the Berber languages.

---
** 'visual-wrap-prefix-mode' now supports variable-pitch fonts.
When using 'visual-wrap-prefix-mode' in buffers with variable-pitch
fonts, the wrapped text will now be lined up correctly so that it's
exactly below the text after the prefix on the first line.

---
** New commands 'unix-word-rubout' and 'unix-filename-rubout'.
Unix-words are words separated by whitespace regardless of the buffer's
syntax table.  In a Unix terminal or shell, C-w kills by Unix-word.
The new commands 'unix-word-rubout' and 'unix-filename-rubout' allow
you to bind keys to operate more similarly to the terminal.

---
** New user option 'kill-region-dwim'.
This option, if non-nil, modifies the fall-back behavior of
'kill-region' ('C-w') if no region is active, and will kill the last word
instead of raising an error.  Note that if you have disabled Transient
Mark mode you might prefer to use 'unix-word-rubout', as this feature
relies on there being an active region.

---
** New user option 'delete-pair-push-mark'.
This option, if non-nil, makes 'delete-pair' push a mark at the end of
the region enclosed by the deleted delimiters.  This makes it easy to
act on that region.  For example, we can highlight it using 'C-x C-x'.

+++
** Electric Pair mode can now pair multiple delimiters at once.
You can now insert or wrap text with multiple sets of parentheses and
other matching delimiters at once with Electric Pair mode, by providing
a prefix argument when inserting one of the delimiters.

+++
** You can now use M-~ during C-x s ('save-some-buffers').
Typing M-~ while saving some buffers means not to save the buffer and
also to mark it as unmodified.  This is an alternative way to mark a
buffer as unmodified which doesn't require switching to that buffer.

* Changes in Emacs 30.1

---
** Emacs now supports Unicode Standard version 15.1.

+++
** Emacs now comes with Org v9.7.
See the file "etc/ORG-NEWS" for user-visible changes in Org.

+++
** Improved support for touchscreen devices.
On systems that understand them (at present X, Android, PGTK, and
MS-Windows), many touch screen gestures are now implemented and
translated into mouse or gesture events, and support for tapping tool
bar buttons and opening menus has been added.  Countless packages, such
as Dired and Custom, have been adjusted to better understand touch
screen input.

+++
** Support for styled underline face attributes.
These are implemented as new values of the 'style' attribute in a face
underline specification, 'double-line', 'dots', and 'dashes', and are
available on GUI systems.  If your terminal's termcap or terminfo
database entry defines the 'Su' or 'Smulx' capability, Emacs will also
emit the prescribed escape sequence to render faces with such styles on
TTY frames.

---
** Support for underline colors on TTY frames.
Colors specified in the underline face will now also be displayed on TTY
frames on terminals that support the 'Su' or 'Smulx' capabilities.

+++
** Modeline elements can now be right-aligned.
Anything following the symbol 'mode-line-format-right-align' in
'mode-line-format' will be right-aligned.  Exactly where it is
right-aligned to is controlled by the new user option
'mode-line-right-align-edge'.

---
** X selection requests are now handled much faster and asynchronously.
This means it should be less necessary to disable the likes of
'select-active-regions' when Emacs is running over a slow network
connection.

---
** Emacs now updates invisible frames that are made visible by a compositor.
If an invisible or an iconified frame is shown to the user by the
compositing manager, Emacs will now redisplay such a frame even though
'frame-visible-p' returns nil or 'icon' for it.  This can happen, for
example, as part of preview for iconified frames.

+++
** Most file notification backends detect unmounting of a watched filesystem.
The only exception is w32notify.

+++
** The ':map' property of images is now recomputed when image is transformed.
Images with clickable maps now work as expected after you run commands
such as 'image-increase-size', 'image-decrease-size', 'image-rotate',
'image-flip-horizontally', and 'image-flip-vertically'.
Set the new user option 'image-recompute-map-p' to nil to prevent Emacs
from recomputing image maps.

** Minibuffer and Completions

+++
*** New commands 'previous-line-completion' and 'next-line-completion'.
Bound to '<up>' and '<down>' arrow keys, respectively, they navigate
the "*Completions*" buffer vertically by lines, wrapping at the
top/bottom when 'completion-auto-wrap' is non-nil.

+++
*** New user option 'minibuffer-visible-completions'.
When customized to non-nil, you can use arrow keys in the minibuffer
to navigate the completions displayed in the "*Completions*" window.
Typing 'RET' selects the highlighted candidate.  'C-g' hides the
completions window.  When the completions window is not visible,
then all these keys have their usual meaning in the minibuffer.
This option is supported for in-buffer completion as well.

---
*** Selected completion candidates are deselected on typing.
When you type at the minibuffer prompt, the current completion
candidate will be un-highlighted, and point in the "*Completions*" window
will be moved off that candidate.  'minibuffer-choose-completion'
('M-RET') will still choose a previously-selected completion
candidate, but the new command 'minibuffer-choose-completion-or-exit'
(bound to 'RET' by 'minibuffer-visible-completions') will exit with
the minibuffer contents instead.  This deselection behavior can be
controlled with the new user option 'completion-auto-deselect', which
is t by default.

+++
*** New value 'historical' for user option 'completions-sort'.
When 'completions-sort' is set to 'historical', completion candidates
will be first sorted alphabetically, and then re-sorted by their order
in the minibuffer history, with more recent candidates appearing first.

+++
*** 'completion-category-overrides' supports more metadata.
The new supported completion properties are 'cycle-sort-function',
'display-sort-function', 'annotation-function', 'affixation-function',
and 'group-function'.  You can now customize them for any category in
'completion-category-overrides' that will override the properties
defined in completion metadata.

+++
*** 'completion-extra-properties' supports more metadata.
The new supported completion properties are 'category',
'group-function', 'display-sort-function', and 'cycle-sort-function'.

** Windows

+++
*** New command 'toggle-window-dedicated'.
This makes it easy to interactively mark a specific window as
dedicated, so it won't be reused by 'display-buffer'.  This can be
useful for complicated window setups.  It is bound to 'C-x w d'
globally.

+++
*** "d" in the mode line now indicates that the window is dedicated.
Windows have always been able to be dedicated to a specific buffer;
see 'window-dedicated-p'.  Now the mode line indicates the dedicated
status of a window, with "d" appearing in the mode line if a window is
dedicated and "D" if the window is strongly dedicated.  This indicator
appears before the buffer name, and after the buffer modification and
remote buffer indicators (usually "---" together).

+++
*** New action alist entry 'some-window' for 'display-buffer'.
It specifies which window 'display-buffer-use-some-window' should prefer.
For example, when 'display-buffer-base-action' is customized to
'(nil . ((some-window . mru)))', then a buffer will be displayed
in the same most recently used window from consecutive calls of
'display-buffer' (in a configuration with more than two windows).

+++
*** New action alist entry 'category' for 'display-buffer'.
If the caller of 'display-buffer' passes '(category . symbol)'
in its 'action' argument, you can match the displayed buffer
by adding '(category . symbol)' to the condition part of
'display-buffer-alist' entries.

+++
*** New action alist entry 'post-command-select-window' for 'display-buffer'.
It specifies whether the window of the displayed buffer should be
selected or deselected at the end of executing the current command.

+++
*** New variable 'window-restore-killed-buffer-windows'.
It specifies how 'set-window-configuration' and 'window-state-put'
should proceed with windows whose buffer was killed after the
corresponding configuration or state was recorded.

---
*** New variable 'window-point-context-set-function'.
It can be used to set a context for window point in all windows by
'window-point-context-set' before calling 'current-window-configuration'
and 'window-state-get'.  Then later another new variable
'window-point-context-use-function' can be used by
'window-point-context-use' after 'set-window-configuration' and
'window-state-put' to restore positions of window points
according to the context stored in a window parameter.

+++
*** New functions 'set-window-cursor-type' and 'window-cursor-type'.
'set-window-cursor-type' sets a per-window cursor type, and
'window-cursor-type' queries this setting for a given window.  Windows
are always created with a 'window-cursor-type' of t, which means to
consult the variable 'cursor-type' as before.

---
*** The user option 'display-comint-buffer-action' is now obsolete.
You can use a '(category . comint)' condition in 'display-buffer-alist'
to match buffers displayed by comint-related commands.  Another
user option 'display-tex-shell-buffer-action' is obsolete too
for which you can use '(category . tex-shell)'.

** Tool bars

+++
*** Tool bars can now be placed on the bottom on more systems.
The 'tool-bar-position' frame parameter can be set to 'bottom' on all
window systems other than macOS and GNUstep (Nextstep).

+++
*** New global minor mode 'modifier-bar-mode'.
When this minor mode is enabled, the tool bar displays buttons
representing modifier keys.  Clicking on these buttons applies the
corresponding modifiers to the next input event.

+++
*** New user option 'tool-bar-always-show-default'.
When non-nil, the tool bar at the top of a frame does not show buffer
local customization of the tool bar.  The default value is nil.

** Tab Bars and Tab Lines

---
*** New user option 'tab-bar-select-restore-context'.
It uses 'window-point-context-set' to save contexts where
window points were located before switching away from the tab,
and 'window-point-context-use' to restore positions of window
points after switching back to that tab.

---
*** New user option 'tab-bar-select-restore-windows'.
It defines what to do with windows whose buffer was killed since the tab
was last selected.  By default it displays a placeholder buffer
with the name " *Old buffer <name>*" that provides information about
the name of the killed buffer that was displayed in that window.

---
*** New user option 'tab-bar-tab-name-format-functions'.
It can be used to add, remove and reorder functions that change the
appearance of every tab on the tab bar.

---
*** New hook 'tab-bar-tab-post-select-functions'.

---
*** New keymap 'tab-bar-mode-map'.
By default it contains a keybinding 'C-TAB' to switch tabs, but only
when 'C-TAB' is not bound globally.  You can unbind it if it conflicts
with 'C-TAB' in other modes.

---
*** New keymap 'tab-line-mode-map'.
By default it contains keybindings for switching tabs: 'C-x <left>',
'C-x <right>', 'C-x C-<left>', 'C-x C-<right>'.  You can unbind them if
you want to use these keys for the commands 'previous-buffer' and
'next-buffer'.

---
*** Default list of tab-line tabs is changed to support a fixed order.
This means that 'tab-line-tabs-fixed-window-buffers', the new default
tabs function, is like the previous 'tab-line-tabs-window-buffers' where
both of them show only buffers that were previously displayed in the
window.  But the difference is that the new function always keeps the
original order of buffers on the tab line, even after switching between
these buffers.  You can drag the tabs and release at a new position
to manually reorder the buffers on the tab line.

---
*** New user option 'tab-line-tabs-buffer-group-function'.
It provides two choices to group tab buffers by major mode and by
project name.

---
*** Buffers on tab-line group tabs are now sorted alphabetically.
This will keep the fixed order of tabs, even after switching between
them.

** Help

+++
*** New command 'help-find-source'.
Switch to a buffer visiting the source of what is being described in
"*Help*".  It is bound to 'C-h 4 s' globally.

---
*** New user option 'describe-bindings-outline-rules'.
This user option controls outline visibility in the output buffer of
'describe-bindings' when 'describe-bindings-outline' is non-nil.

---
*** 'describe-function' shows the function inferred type when available.
For native compiled Lisp functions, 'describe-function' prints (after
the signature) the automatically inferred function type as well.

---
*** 'describe-function' now shows the type of the function object.
The text used to say things like "car is a built-in function" whereas it
now says "car is a primitive-function" where "primitive-function" is the
name of the symbol returned by 'cl-type-of'.  You can click on those
words to get information about that type.

---
*** 'C-h m' ('describe-mode') uses outlining by default.
Set 'describe-mode-outline' to nil to get back the old behavior.

---
*** 'C-h k' ('describe-key') shows Unicode name.
For keybindings which produce single characters via translation or input
methods, 'C-h k' now shows the Unicode name of the produced character in
addition to the character itself, e.g.

'C-h k C-x 8 E' =>

    € 'EURO SIGN' (translated from C-x 8 E)

---
*** 'C-h b' ('describe-bindings') shows Unicode names.
For keybindings which produce single characters via translation (such as
those using the 'C-x 8' or 'A-' prefix, or 'dead-acute', 'dead-grave',
etc), the Unicode names will now be shown in addition to the character
itself, i.e.

    A-!			¡	INVERTED EXCLAMATION MARK
    A-$			¤	CURRENCY SIGN

and so on.

+++
*** Multi-character key echo now ends with a suggestion to use Help.
Customize 'echo-keystrokes-help' to nil to prevent that.

** Customize

+++
*** New command 'customize-dirlocals'.
This command pops up a buffer to edit the settings in ".dir-locals.el".

---
*** New command 'customize-toggle-option'.
This command can toggle boolean options for the duration of a session.

+++
*** New prefix argument for modifying directory-local variables.
The commands 'add-dir-local-variable', 'delete-dir-local-variable' and
'copy-file-locals-to-dir-locals' now take an optional prefix argument,
to enter the file name where you want to modify directory-local
variables.

+++
*** New user option 'safe-local-variable-directories'.
This user option names directories in which Emacs will treat all
directory-local variables as safe.

+++
** CL Print

+++
*** There is a new chapter in the CL manual documenting cl-print.el.
See the Info node "(cl) Printing".

+++
*** You can expand the "..." truncation everywhere.
The code that allowed "..." to be expanded in the "*Backtrace*" buffer
should now work anywhere the data is generated by 'cl-print'.

+++
*** The 'backtrace-ellipsis' button is replaced by 'cl-print-ellipsis'.

+++
*** hash-tables' contents can be expanded via the ellipsis.

+++
*** Modes can control the expansion via 'cl-print-expand-ellipsis-function'.

+++
*** New setting 'raw' for 'cl-print-compiled'.
This setting causes byte-compiled functions to be printed in full by
'prin1'.  A button on this output can be activated to disassemble the
function.

** Miscellaneous

+++
*** New command 'kill-matching-buffers-no-ask'.
This works like 'kill-matching-buffers', but without asking for
confirmation.

+++
*** 'recover-file' can show diffs between auto save file and current file.
When answering the prompt with "diff" or "=", it now shows the diffs
between the auto save file and the current file.

+++
*** 'read-passwd' can toggle the visibility of passwords.
Use 'TAB' in the minibuffer to show or hide the password.
Alternatively, click the new show-password icon on the mode-line with
'mouse-1' to toggle the visibility of the password.

*** 'advice-remove' is now an interactive command.
When called interactively, 'advice-remove' now prompts for an advised
function to the advice to remove.

---
*** New user option 'uniquify-dirname-transform'.
This can be used to customize how buffer names are uniquified, by
making arbitrary transforms on the buffer's directory name (whose
components are used to uniquify buffer names when they clash).  You
can use this to distinguish between buffers visiting files with the
same base name that belong to different projects by using the provided
transform function 'project-uniquify-dirname-transform'.

+++
*** New user option 'remote-file-name-inhibit-delete-by-moving-to-trash'.
When non-nil, this option suppresses moving remote files to the local
trash when deleting.  Default is nil.

---
*** New user option 'remote-file-name-inhibit-auto-save'.
If this user option is non-nil, 'auto-save-mode' will not auto-save
remote buffers.  The default is nil.

+++
*** New user option 'remote-file-name-access-timeout'.
If a positive number, this option limits the call of 'access-file'
for remote files to that number of seconds.  Default is nil.

+++
*** New user option 'yes-or-no-prompt'.
This allows the user to customize the prompt that is appended by
'yes-or-no-p' when asking questions.  The default value is
"(yes or no) ".

---
*** New user option 'menu-bar-close-window'.
When non-nil, selecting "Close" from the "File" menu or clicking
"Close" in the tool bar will result in the current window being
deleted, if possible.  The default is nil, and these gestures kill the
buffer shown in the current window, but don't delete the window.

---
*** New face 'display-time-date-and-time'.
This is used for displaying the time and date components of
'display-time-mode'.

---
*** New face 'appt-notification' for 'appt-display-mode-line'.
It can be used to customize the look of the appointment notification
displayed on the mode line when 'appt-display-mode-line' is non-nil.

---
*** New icon images for general use.
Several symbolic icons have been added to "etc/images/symbols",
including plus, minus, check-mark, star, etc.

---
*** Emacs now recognizes shebang lines that pass '-S'/'--split-string' to 'env'.
When visiting a script that invokes 'env -S INTERPRETER ARGS...' in
its shebang line, Emacs will now skip over 'env -S' and deduce the
major mode based on the interpreter after 'env -S'.

*** 'insert-directory-program' is now a user option.
On *BSD and macOS systems, this user option now defaults to the "gls"
executable, if it exists.  This should remove the need to change its
value when installing GNU coreutils using something like ports or
Homebrew.

+++
*** 'write-region-inhibit-fsync' now defaults to t in interactive mode.
This is the default in batch mode since Emacs 24.

---
*** The default value of 'read-process-output-max' was increased to 65536.

+++
*** 'url-gateway-broken-resolution' is now obsolete.
This option was intended for use on SunOS 4.x and Ultrix systems,
neither of which have been supported by Emacs since version 23.1.
The user option 'url-gateway-nslookup-program' and the command
'url-gateway-nslookup-host' are consequently also obsolete.


* Editing Changes in Emacs 30.1

+++
** New minor mode 'visual-wrap-prefix-mode'.
When enabled, continuation lines displayed for a wrapped long line
will receive a 'wrap-prefix' automatically computed from the line's
surrounding context, such that continuation lines are indented on
display as if they were filled with 'M-q' or similar.  Unlike 'M-q',
the indentation only happens on display, and doesn't change the buffer
text in any way.  The global minor mode
'global-visual-wrap-prefix-mode' enables this minor mode in all
buffers.

(This minor mode is the 'adaptive-wrap' ELPA package renamed and
lightly edited for inclusion in Emacs.)

+++
** New global minor mode 'kill-ring-deindent-mode'.
When enabled, text being saved to the kill ring will be de-indented by
the column number at its start.  For example, saving the entire
function call within an indented block:

foo ()
{
  long_function_with_several_arguments (argument_1_compute (),
					argument_2_compute (),
					argument_3_compute ());
}

will save this to the kill ring:

long_function_with_several_arguments (argument_1_compute (),
				      argument_2_compute (),
				      argument_3_compute ())

This omits the two columns of extra indentation that would otherwise be
copied from the second and third lines and saved to the kill ring.

---
** New command 'replace-regexp-as-diff'.
It reads a regexp to search for and a string to replace with, then
displays a buffer with replacements as diffs.  After reviewing the
changes in the output buffer you can apply the replacements as
a patch to the current file buffer.  There are also new commands
'multi-file-replace-regexp-as-diff' that shows as diffs replacements
in a list of specified files, and 'dired-do-replace-regexp-as-diff'
that shows as diffs replacements in the marked files in Dired.

+++
** New mode of prompting for register names and showing preview.
The new user option 'register-use-preview' can be customized to the
value t or 'insist' to request a different user interface of prompting for
register names and previewing the registers: Emacs will require
confirmation for overwriting the value of a register, and will show
the preview of registers without delay.  You can also customize this
new option to disable the preview completely.

The default value of 'register-use-preview' ('traditional') preserves the
behavior of Emacs 29 and before.  See the Info node "(emacs) Registers"
for more details about the new UI and its variants.

+++
** New advanced macro counter commands.
New commands have been added to implement advanced macro counter
functions.

The commands 'C-x C-k C-r l' and 'C-x C-k C-r s' load and save the
macro counter from and to a number register, respectively.

The commands 'C-x C-k C-r a =', 'C-x C-k C-r a <', and 'C-x C-k C-r a >'
compare the macro counter with the contents of a number register and
increment the counter by an optional prefix if the comparison succeeds.

The commands 'C-x C-k C-q =', 'C-x C-k C-q <', and 'C-x C-k C-q >'
compare the macro counter with an optional prefix and terminate the
macro if the comparison succeeds.

+++
** New mode 'kmacro-menu-mode' and new command 'list-keyboard-macros'.
The new command 'list-keyboard-macros' is the keyboard-macro version
of commands like 'list-buffers' and 'list-processes', creating a listing
of the currently existing keyboards macros using the new mode
'kmacro-menu-mode'.  It allows rearranging the macros in the ring,
duplicating them, deleting them, and editing their counters, formats,
and keys.

---
** On X, Emacs now supports input methods which perform "string conversion".
This means an input method can now ask Emacs to delete text
surrounding point and replace it with something else, as well as query
Emacs for surrounding text.  If your input method allows you to "undo"
mistaken compositions, this will now work as well.

---
** New user option 'duplicate-region-final-position'.
It controls the placement of point and the region after duplicating a
region with 'duplicate-dwim'.

+++
** New user option 'mouse-prefer-closest-glyph'.
When enabled, clicking or dragging with the mouse will put the point
or start the drag in front of the buffer position corresponding to the
glyph with the closest X coordinate to the click or start of the drag.
In other words, if the mouse pointer is in the right half of a glyph,
point will be put after the buffer position corresponding to that glyph,
whereas if the mouse pointer is in the left half of a glyph, point
will be put in front the buffer position corresponding to that glyph.
By default this is disabled.

---
** New pre-defined values for 'electric-quote-chars'.
The available customization options for 'electric-quote-chars' have been
updated with common pairs of quotation characters, including "‘", "’",
"“", "”", "«", "»", "‹", "›", "‚", "„", "「", "」", "『", and "』".
The default is unchanged.

+++
** 'M-TAB' now invokes 'completion-at-point' in Text mode.
By default, Text mode no longer binds 'M-TAB' to 'ispell-complete-word'.
Instead, this mode arranges for 'completion-at-point', globally bound to
'M-TAB', to perform word completion as well.  You can have Text mode
binding 'M-TAB' to 'ispell-complete-word' as it did in previous Emacs
versions, or disable Ispell word completion in Text mode altogether, by
customizing the new user option 'text-mode-ispell-word-completion'.

** Internationalization

---
*** Mode-line mnemonics for some coding-systems have changed.
The mode-line mnemonic for 'utf-7' is now the lowercase 'u', to be
consistent with the other encodings of this family.

The mode-line mnemonic for 'koi8-u' is now 'У', U+0423 CYRILLIC
CAPITAL LETTER U, to distinguish between this encoding and the
UTF-8/UTF-16 family.

If your terminal cannot display 'У', or if you want to get the old
behavior back for any other reason, you can do that using the
'coding-system-put' function.  For example, the following restores the
previous behavior of showing 'U' in the mode line for 'koi8-u':

    (coding-system-put 'koi8-u :mnemonic ?U)

---
*** 'vietnamese-tcvn' is now a coding system alias for 'vietnamese-vscii'.
VSCII-1 and TCVN-5712 are different names for the same character
encoding.  Therefore, the duplicate coding system definition has been
dropped in favor of an alias.

The mode-line mnemonic for 'vietnamese-vscii' and its aliases is the
lowercase letter "v".

---
*** Users in CJK locales can control width of some non-CJK characters.
Some characters are considered by Unicode as "ambiguous" with respect
to their display width: either "full-width" (i.e., taking 2 columns on
display) or "narrow" (taking 1 column).  The actual width depends on
the fonts used for these characters by Emacs or (for text-mode frames)
by the terminal emulator.  Traditionally, font sets in CJK locales
were set up so as to display these characters as full-width, and thus
Emacs modified the char-width table in those locales to follow suit.
Lately, the tendency is to display these characters as narrow.  The
new user option 'cjk-ambiguous-chars-are-wide' allows users to control
whether Emacs considers these characters as full-width (the default)
or narrow (if the variable is customized to the nil value).

This setting affects the results of 'string-width' and similar
functions in CJK locales.

---
*** New input methods for the Urdu, Pashto, and Sindhi languages.
These languages are spoken in Pakistan and Afghanistan.

---
*** New input method "english-colemak".
This input method supports the Colemak keyboard layout.

---
*** Additional 'C-x 8' key translations for "æ" and "Æ".
These characters can now be input with 'C-x 8 a e' and 'C-x 8 A E',
respectively, in addition to the existing translations 'C-x 8 / e' and
'C-x 8 / E'.

---
*** New 'C-x 8' key translations for "low" quotes "„", and "‚".
These can now be entered with 'C-x , "' and 'C-x , ''.

---
*** New German language 'C-x 8' key translations for quotation marks.
The characters "„", "“", and "”" can now be entered with 'C-x 8 v',
'C-x 8 b' and 'C-x 8 n'.  The single versions "‚", "‘", and "’" can now
be entered with 'C-x 8 V', 'C-x 8 B' and 'C-x 8 N'.  These characters
are used for the official German quoting style.  Using them requires
activating German language support via 'iso-transl-set-language'.

---
*** "latin-prefix" and "latin-postfix" quotation marks additions.
These input methods can now produce single, double and "low" left and
right quotation marks:

    "‘", "’", "“", "”", "„", and "‚"

by using "[", "]", and "," for "left", "right", and "low" respectively
to modify "'" and """.

---
*** "latin-prefix" and "latin-postfix" guillemets support.
These input methods can now produce single guillemets "‹" and "›".  For
"latin-prefix" use "~~<" and "~~>", for "latin-postfix" use "<~" and
">~".  Double guillemets ("«" and "»") were already supported.

---
*** New French language 'C-x 8' key translations for "‹" and "›".
These characters can now be entered using 'C-x 8 ~ <' and 'C-x 8 ~ >',
respectively, after activating French language support via
'iso-transl-set-language'.  Double guillemets were already supported via
'C-x 8 <' and 'C-x 8 >'

---
*** Additional 'C-x 8' key translation for Euro "€" currency symbol.
This can now be entered using 'C-x 8 E' in addition to the existing
'C-x 8 * E' translation.

** Whitespace

---
*** 'whitespace-cleanup' now adds missing newline at end of file.
If 'whitespace-style' includes 'missing-newline-at-eof (which is the
default), the 'whitespace-cleanup' function will now add the newline.

** Gnus

---
*** Replying to icalendar events now supports specifying a comment.
When called with a prefix argument, accepting, declining, or tentatively
accepting an icalendar event will prompt for a comment to add to the
response.

** Eshell

---
*** You can now customize the image zoom levels to cycle through.
By customizing 'shr-image-zoom-levels', you can change the list of zoom
levels that SHR cycles through when calling 'shr-zoom-image'.


* New Modes and Packages in Emacs 31.1


* Incompatible Lisp Changes in Emacs 31.1


* Lisp Changes in Emacs 31.1

+++
*** Support interactive D-Bus authorization.
A new ':authorizable t' parameter has been added to 'dbus-call-method'
and 'dbus-call-method-asynchronously' to allow the user to interactively
authorize the invoked D-Bus method (e.g., via polkit).


* Changes in Emacs 31.1 on Non-Free Operating Systems

---
*** New option 'eshell-command-async-buffer'.
This option lets you tell 'eshell-command' how to respond if its output
buffer is already in use by another invocation of 'eshell-command', much
like 'async-shell-command-buffer' does for 'shell-command'.  By default,
this will prompt for confirmation before creating a new buffer when
necessary.  To restore the previous behavior, set this option to
'confirm-kill-process'.

+++
*** 'eshell-execute-file' is now an interactive command.
Interactively, this now prompts for a script file to execute. With the
prefix argument, it will also insert any output into the current buffer
at point.

+++
*** 'eshell-command' and 'eshell-execute-file' can now set where stderr goes.
These functions now take an optional ERROR-TARGET argument to control
where to send the standard error output.  See the "(eshell) Entry
Points" node in the Eshell manual for more details.

+++
*** Eshell's built-in "wait" command now accepts a timeout.
By passing "-t" or "--timeout", you can specify a maximum time to wait
for the processes to exit.  Additionally, you can now wait for external
processes by passing their PIDs.

** SHR

+++
*** SHR now slices large images into rows.
Sliced images allow for more intuitive scrolling up/down by letting you
scroll past each slice, instead of jumping past the entire image.
Previously, SHR sliced images when zoomed to their original size, no
matter how large or small that was).  Now, SHR slices any images taller
than 'shr-sliced-image-height'.  For more information, see the "(eww)
Advanced" node in the EWW manual.

** Outline mode

+++
*** New commands to show/hide outlines by regexp.
'C-c / h' ('outline-hide-by-heading-regexp') asks for a regexp and then
hides the body lines of all outlines whose heading lines match the
regexp.  'C-c / s' ('outline-show-by-heading-regexp') does the inverse:
it shows the bodies of outlines that matched a regexp.

+++
*** 'outline-minor-mode' is supported in tree-sitter major modes.
It can be used in all tree-sitter major modes that set either the
variable 'treesit-simple-imenu-settings' or 'treesit-outline-predicate'.

** Info

---
*** New user option 'Info-url-alist'.
This user option associates manual names with URLs.  It affects the
'Info-goto-node-web' command.  By default, associations for all
Emacs-included manuals are set.  Further associations can be added for
arbitrary Info manuals.

---
*** Emacs can now display Info manuals compressed with 'lzip'.
This requires the 'lzip' program to be installed on your system.

** GUD (Grand Unified Debugger)

+++
*** New user option 'gud-highlight-current-line'.
When enabled, GUD will visually emphasize the line being executed upon
pauses in the debuggee's execution, such as those occasioned by
breakpoints being hit.

+++
*** New command 'lldb'.
Run the LLDB debugger, analogous to the 'gud-gdb' command.

---
*** Variable order and truncation can now be configured in 'gdb-many-windows'.
The new user option 'gdb-locals-table-row-config' allows users to
configure the order and max length of various properties in the local
variables buffer when using 'gdb-many-windows'.

By default, this user option is set to write the properties in the order:
'name', 'type' and 'value', where the 'name' and 'type' are truncated to 20
characters, and the 'value' is truncated according to the value of
'gdb-locals-value-limit'.

If you want to get back the old behavior, set the user option to the value

    (setopt gdb-locals-table-row-config
            `((type . 0) (name . 0) (value . ,gdb-locals-value-limit)))

+++
*** New user option 'gdb-display-io-buffer'.
If this is nil, command 'gdb' will neither create nor display a separate
buffer for the I/O of the program being debugged, but will instead
redirect the program's interaction to the GDB execution buffer.  The
default is t, to preserve previous behavior.

** Grep

+++
*** New user option 'grep-use-headings'.
When non-nil, the output of Grep is split into sections, one for each
file, instead of having file names prefixed to each line.  It is
equivalent to the '--heading' option of some tools such as 'git grep'
and 'rg'.  The headings are displayed using the new 'grep-heading' face.
The default is nil.

** Compilation mode

---
*** The 'omake' matching rule is now disabled by default.
This is because it partly acts by modifying other rules which may
occasionally be surprising.  It can be re-enabled by adding 'omake' to
'compilation-error-regexp-alist'.

---
*** Lua errors and stack traces are now recognized.
Compilation mode now recognizes Lua language errors and stack traces.
Every Lua error is recognized as a compilation error, and every Lua
stack frame is recognized as a compilation info.

** Project

+++
*** New user option 'project-mode-line'.
When non-nil, display the name of the current project on the mode
line.  Clicking 'mouse-1' on the project name pops up the project
menu.  The default value is nil.

---
*** New user option 'project-file-history-behavior'.
Customizing it to 'relativize' makes commands like 'project-find-file'
and 'project-find-dir' display previous history entries relative to
the current project.

---
*** New user option 'project-key-prompt-style'.
The look of the key prompt in the project switcher has been changed
slightly.  To get the previous one, set this option to 'brackets'.

---
*** Function 'project-try-vc' tries harder to find the responsible VCS.
When 'project-vc-extra-root-markers' is non-nil, and causes a
subdirectory project to be detected which is not a VCS root, Project now
additionally traverses the parent directories until a VCS root is found
(if any), so that the ignore rules for that repository are used, and
the file listing's performance is still optimized.

+++
*** New commands 'project-any-command' and 'project-prefix-or-any-command'.
The former is now bound to 'C-x p o' by default.
The latter is designed primarily for use as a value of
'project-switch-commands'.  If instead of a short menu you prefer to
have access to all keys defined inside 'project-prefix-map', as well
as global bindings (to run other commands inside the project root),
you can add this to your init script:

    (setopt project-switch-commands #'project-prefix-or-any-command)

---
*** New variable 'project-files-relative-names'.
If it is non-nil, 'project-files' can return file names relative to the
project root.  Project backends can use this to improve the performance
of their 'project-files' implementation.

** VC

---
*** Log-Edit buffers now display a tool bar.
This tool bar contains items for committing log entries and editing or
generating log entries, among other editing operations.

---
*** New user option 'vc-git-shortlog-switches'.
This is a string or a list of strings that specifies the Git log
switches for shortlogs, such as the one produced by 'C-x v L'.
'vc-git-log-switches' is no longer used for shortlogs.

---
*** New value 'no-backend' for user option 'vc-display-status'.
With this value only the revision number is displayed on the mode-line.

---
*** Obsolete command 'vc-switch-backend' re-added as 'vc-change-backend'.
The command was previously obsoleted and unbound in Emacs 28.

---
*** Support for viewing VC change history across renames.
When a fileset's VC change history ends at a rename, 'C-x v l' now
prints the old name(s) and shows a button which jumps to the history of
the files under the old names.  This feature is supported for Git and
Hg.  Naturally, 'vc-git-print-log-follow' should be nil for this to work
(or '--follow' should not be in 'vc-hg-log-switches', in Hg's case).
Unlike when the '--follow' switch is used, commands to see the diff of
the old revision ('d'), to check out an old file version ('f') or to
annotate it ('a'), also work on revisions which precede renames.

---
*** 'vc-annotate' now abbreviates the Git revision in the buffer name.
When using the Git backend, 'vc-annotate' will use an abbreviated
revision identifier in its buffer name.  To restore the previous
behavior, set user option 'vc-annotate-use-short-revision' to nil.

---
*** New user option 'vc-git-file-name-changes-switches'.
It allows tweaking the thresholds for rename and copy detection.

---
*** VC Directory buffers now display the upstream branch in Git repositories.
The "upstream branch" is the branch from which 'vc-pull' fetches changes
by default.  In Git terms, the upstream branch of branch B is determined
by configuration variables 'branch.B.remote' and 'branch.B.merge'.

When these configuration variables are set for the current branch, the
VC Directory buffer will show the corresponding upstream branch under
the "Tracking" header.

** Diff mode

---
*** New user option 'diff-refine-nonmodified'.
When this is non-nil, 'diff-refine-hunk' will highlight lines that were
added or removed in their entirety (as opposed to modified lines, where
some parts of the line were modified), using the same faces as for
highlighting the words added and removed within modified lines.  The
default value is nil.

+++
*** 'diff-ignore-whitespace-hunk' can now be applied to all hunks.
When called with a non-nil prefix argument,
'diff-ignore-whitespace-hunk' now iterates over all the hunks in the
current diff, regenerating them without whitespace changes.

+++
*** New user option 'diff-ignore-whitespace-switches'.
This allows changing which type of whitespace changes are ignored when
regenerating hunks with 'diff-ignore-whitespace-hunk'.  Defaults to
the previously hard-coded "-b".

+++
*** New command 'diff-apply-buffer' bound to 'C-c RET a'.
It applies the diff in the entire diff buffer and
saves all modified file buffers.

** Dired

---
*** New user option 'dired-movement-style'.
When non-nil, make 'dired-next-line', 'dired-previous-line',
'dired-next-dirline', 'dired-prev-dirline' skip empty lines.
It also controls how to move point when encountering a boundary
(e.g., if every line is visible, invoking 'dired-next-line' at
the last line will move to the first line).  The default is nil.

---
*** New user option 'dired-filename-display-length'.
It is an integer representing the maximum display length of file names.
The middle part of a file name whose length exceeds the restriction is
hidden and an ellipsis is displayed instead.  A value of 'window'
means using the right edge of window as the display restriction.  The
default is nil.

---
*** New user option 'shell-command-guess-functions'.
It defines how to populate a list of commands available
for 'M-!', 'M-&', '!', '&' and the context menu "Open With"
based on marked files in Dired.  Possible backends are
'dired-guess-default', MIME types, XDG configuration
and a universal command such as "open" or "start"
that delegates to the OS.

+++
*** New command 'dired-do-open'.
This command is bound to 'E' (mnemonics "External").  Also it can be
used by clicking "Open" in the context menu; it "opens" the marked or
clicked on files according to the OS conventions.  For example, on
systems supporting XDG, this runs 'xdg-open' on the files.

+++
*** New variable 'dired-guess-shell-alist-optional'.
It contains commands for external viewers and players for various media
formats, moved to this list from 'dired-guess-shell-alist-default'.

---
*** The default value of 'dired-omit-size-limit' was increased.
After performance improvements to omitting in large directories, the new
default value is 300k, up from 100k.  This means 'dired-omit-mode' will
omit files in directories whose directory listing is up to 300 kilobytes
in size.

+++
*** 'dired-listing-switches' handles connection-local values if exist.
This allows you to customize different switches for different remote machines.

** Ediff

---
*** New user option 'ediff-floating-control-frame'.
If non-nil, try making the control frame be floating rather than tiled.

Many X tiling window managers make the Ediff control frame a tiled
window equal in size to the main Emacs frame, which works poorly.
This option is useful to set if you use such a window manager.

** Buffer Selection

---
*** New user option 'bs-default-action-list'.
You can now configure how to display the "*buffer-selection*" buffer
using this new option.  (Or set 'display-buffer-alist' directly.)

** Eshell

+++
*** You can now run Eshell scripts in batch mode.
By adding the following interpreter directive to an Eshell script, you
can make it executable like other shell scripts:

    #!/usr/bin/env -S emacs --batch -f eshell-batch-file

+++
*** New builtin Eshell command 'compile'.
This command runs another command, sending its output to a compilation
buffer when the command would output interactively.  This can be useful
when defining aliases so that they produce a compilation buffer when
appropriate, but still allow piping the output elsewhere if desired.
For more information, see the "(eshell) Built-ins" node in the Eshell
manual.

+++
*** Eshell's 'env' command now supports running commands.
Like in many other shells, Eshell's 'env' command now lets you run a
command passed as arguments to 'env'.  If you pass any initial
arguments of the form 'VAR=VALUE', 'env' will first set 'VAR' to
'VALUE' before running the command.

+++
*** Eshell's 'TERM' env var uses 'eshell-term-name' as default.
The eshell's 'TERM' environment variable uses 'eshell-term-name' as default.

---
*** Eshell's 'umask' command now supports setting the mask symbolically.
Now, you can pass an argument like "u+w,o-r" to Eshell's 'umask'
command, which will give write permission for owners of newly-created
files and deny read permission for users who are not members of the
file's group.  See the Info node "(coreutils) File permissions" for
more information on this notation.

---
*** Performance improvements for interactive output in Eshell.
Interactive output in Eshell should now be significantly faster,
especially for commands that can print large amounts of output
(e.g. "cat").  For external commands, Eshell saves time by only looking
for password prompts in the last 256 characters of each block of output.
To restore the previous behavior when checking for password prompts, set
'eshell-password-prompt-max-length' to 'most-positive-fixnum'.

---
*** Eshell built-in commands can now display progress.
Eshell built-in commands like "cat" and "ls" now update the display
periodically while running to show their progress.

+++
*** New special reference type '#<marker POSITION BUFFER>'.
This special reference type returns a marker at 'POSITION' in
'BUFFER'.  You can insert it by typing or using the new interactive
command 'eshell-insert-marker'.  You can also insert special
references of any type using the new interactive command
'eshell-insert-special-reference'.  See the "(eshell) Arguments" node
in the Eshell manual for more details.

+++
*** New splice operator for Eshell dollar expansions.
Dollar expansions in Eshell now let you splice the elements of the
expansion in-place using '$@expr'.  This makes it easier to fill lists
of arguments into a command, such as when defining aliases.  For more
information, see the "(eshell) Dollars Expansion" node in the Eshell
manual.

+++
*** You can now splice Eshell globs in-place into argument lists.
By setting 'eshell-glob-splice-results' to a non-nil value, Eshell
will expand glob results in-place as if you had typed each matching
file name individually.  For more information, see the "(eshell)
Globbing" node in the Eshell manual.

+++
*** Eshell now supports negative numbers and ranges for indices.
Now, you can retrieve the last element of a list with '$my-list[-1]'
or get a sublist of elements 2 through 4 with '$my-list[2..5]'.  For
more information, see the "(eshell) Dollars Expansion" node in the
Eshell manual.

+++
*** Eshell commands can now be explicitly-remote (or local).
By prefixing a command name in Eshell with a remote identifier, like
"/ssh:user@remote:whoami", you can now run commands on a particular
host no matter your current directory.  Likewise, you can run a
command on your local system no matter your current directory via
"/local:whoami".  For more information, see the "(eshell) Remote Access"
node in the Eshell manual.

+++
*** Eshell's '$UID' and '$GID' variables are now connection-aware.
Now, when expanding '$UID' or '$GID' in a remote directory, the value
is the user or group ID associated with the remote connection.

---
*** Eshell now uses 'field' properties in its output.
In particular, this means that pressing the '<home>' key moves the
point to the beginning of your input, not the beginning of the whole
line.  If you want to go back to the old behavior, add something like
this to your configuration:

    (keymap-set eshell-mode-map "<home>" #'eshell-bol-ignoring-prompt)

This also means you no longer need to adjust 'eshell-prompt-regexp'
when customizing your Eshell prompt.

---
*** You can now properly unload Eshell.
Calling '(unload-feature 'eshell)' no longer signals an error, and now
correctly unloads Eshell and all of its modules.

+++
*** 'eshell-read-aliases-list' is now an interactive command.
After manually editing 'eshell-aliases-file', you can use this command
to load the edited aliases.

+++
*** 'rgrep' is now a builtin Eshell command.
Running 'rgrep' in Eshell now uses the Emacs grep facility instead of
calling external rgrep.

+++
*** If a command exits abnormally, the Eshell prompt now shows its exit code.

+++
*** New user option 'eshell-history-append'.
If non-nil, each Eshell session will save history by appending new
entries of that session to the history file rather than overwriting
the file with the whole history of the session.  The default is nil.

** Pcomplete

---
*** New user option 'pcomplete-remote-file-ignore'.
When this option is non-nil, remote file names are not completed by
Pcomplete.  Packages, like 'shell-mode', could set this in order to
suppress remote file name completion at all.

---
*** Completion for the 'doas' command has been added.
Command completion for 'doas' in Eshell and Shell mode will now work.

** Shell mode

+++
*** New user option 'shell-get-old-input-include-continuation-lines'.
When this user option is non-nil, 'shell-get-old-input' ('C-RET')
includes multiple shell "\" continuation lines from command output.
Default is nil.

+++
*** New user option 'shell-history-file-name'.
When this user option is set to t, 'shell-mode' does not read the shell
history file.  Setting this user option to a string specifies the name
of the shell history file to be read.  A nil value triggers reading the
environment variable 'HISTFILE'.

In a 'shell' buffer, this user option is connection-local.

---
*** Performance improvements for interactive output.
Interactive output in Shell mode now scans more selectively for password
prompts by only examining the last 256 characters of each block of
output, reducing the time spent when printing large amounts of output.
To restore the old behavior, set 'comint-password-prompt-max-length' to
'most-positive-fixnum'.

** Prog mode

+++
*** New command 'prog-fill-reindent-defun'.
This command either fills a single paragraph in a defun, such as a
docstring, or a comment, or (re)indents the surrounding defun if point
is not in a comment or a string.  By default, it is bound to 'M-q' in
'prog-mode' and all its descendants.

** Imenu

+++
*** New user option 'imenu-flatten'.
It controls whether to flatten the list of sections in an imenu, and
how to display the sections in the flattened list.

+++
*** The sort order of Imenu completions can now be customized.
You can customize the user option 'completion-category-overrides'
and set 'display-sort-function' for the category 'imenu'.

** Which Function mode

+++
*** Which Function mode can now display function names on the header line.
The new user option 'which-func-display' allows choosing where the
function name is displayed.  The default is 'mode' to display in the
mode line.  'header' will display in the header line;
'mode-and-header' displays in both the header line and mode line.

+++
*** New user option 'which-func-update-delay'.
This replaces the user option 'idle-update-delay', which was previously
used to control the delay before 'which-function-mode' updated its
display.  The user option 'idle-update-delay', which was only used by
Which Function mode, is now obsolete.

** Tramp

+++
*** Tramp methods can be optional.
An optional connection method is not enabled by default.  The user must
enable it explicitly by the 'tramp-enable-method' command.  The existing
methods "fcp", "krlogin", " ksu" and "nc" are optional now.

+++
*** New optional connection method "androidsu".
This provides access to system files with elevated privileges granted by
the idiosyncratic 'su' implementations and system utilities customary on
Android.

+++
*** New optional connection method "run0".
This connection method is similar to "sudo", but it uses the
'systemd-run' program internally.

+++
*** New connection methods "dockercp" and "podmancp".
These are the external methods counterparts of "docker" and "podman".

+++
*** New optional connection methods for containers.
There are new optional connection methods "toolbox", "distrobox",
"flatpak", "apptainer" and "nspawn".  They allow accessing system
containers provided by Toolbox or Distrobox, sandboxes provided by
Flatpak, instances managed by Apptainer, or accessing systemd-based
light-weight containers..

+++
*** Connection method "kubernetes" supports now optional container name.
The host name for Kubernetes connections can be of kind [CONTAINER.]POD,
in order to specify a dedicated container.  If there is just the pod
name, the first container in the pod is taken.  The new user options
'tramp-kubernetes-context' and 'tramp-kubernetes-namespace' allow
accessing pods with different context or namespace but the default one.

+++
*** Rename 'tramp-use-ssh-controlmaster-options' to 'tramp-use-connection-share'.
The old name still exists as obsolete variable alias.  This user
option controls now connection sharing for both ssh-based and
plink-based methods.  It allows the values t, nil, and 'suppress'.
The latter suppresses also "ControlMaster" settings in the user's
"~/.ssh/config" file, or connection share configuration in PuTTY
sessions, respectively.

+++
*** New command 'tramp-cleanup-some-buffers'.
It kills only a subset of opened remote buffers, subject to the user
option 'tramp-cleanup-some-buffers-hook'.

+++
*** New command 'inhibit-remote-files'.
This command disables the handling of file names with the special
remote file name syntax.  It should be applied only when remote files
won't be used in this Emacs instance.  It provides a slightly improved
performance of file name handling in Emacs.

+++
*** New macro 'without-remote-files'.
This macro could wrap code which handles local files only.  Due to the
temporary deactivation of remote files, it results in a slightly
improved performance of file name handling in Emacs.

+++
*** New user option 'tramp-completion-multi-hop-methods'.
It contains a list of connection methods for which completion should
be attempted at the end of a multi-hop chain.  This allows completion
candidates to include a list of, for example, containers running on a
remote docker host.

+++
*** New command 'tramp-revert-buffer-with-sudo'.
It reverts the current buffer to visit with "sudo" permissions.  The
buffer must either visit a file, or it must run 'dired-mode'.  Another
method but "sudo" can be configured with user option
'tramp-file-name-with-method'.

+++
*** Direct asynchronous processes are indicated by a connection-local variable.
If direct asynchronous processes shall be used, set the connection-local
variable 'tramp-direct-async-process' to a non-nil value.  This has been
changed, in previous Emacs versions this was indicated by the now
deprecated connection property "direct-async-process".  See the Tramp
manual "(tramp) Improving performance of asynchronous remote processes".

---
*** Direct asynchronous processes use 'tramp-remote-path'.
When a direct asynchronous process is invoked, it uses 'tramp-remote-path'
for setting the remote 'PATH' environment variable.

---
*** New user option 'shr-fill-text'.
When 'shr-fill-text' is non-nil (the default), SHR will fill text
according to the width of the window.  If you customize it to nil, SHR
will leave the text as-is; in that case, EWW will automatically enable
'visual-line-mode' when displaying a page so that long lines are
visually wrapped at word boundaries.

** EWW

---
*** New mouse bindings in EWW buffers.
Certain form elements that were displayed as buttons, yet could only be
activated by keyboard input, are now operable using 'mouse-2'.  With
"Submit" buttons, this triggers submission of the form, while clicks on
other classes of buttons either toggle their values or prompt for user
input, as the case may be.

---
*** EWW text input fields and areas are now fields.
In consequence, movement commands and OS input method features now
recognize and confine their activities to the text input field around
point.  See also the Info node "(elisp) Fields".

+++
*** 'eww-open-file' can now display the file in a new buffer.
By default, the command reuses the "*eww*" buffer, but if called with
the new argument NEW-BUFFER non-nil, it will use a new buffer instead.
Interactively, invoke 'eww-open-file' with a prefix argument to
activate this behavior.

---
*** 'eww' URL or keyword prompt now has tab completion.
The interactive minibuffer prompt when invoking 'eww' now has support
for tab completion.

+++
*** 'eww' URL and keyword prompt now completes suggested URIs and bookmarks.
The interactive minibuffer prompt when invoking 'eww' now provides
completions from 'eww-suggest-uris'.  'eww-suggest-uris' now includes
bookmark URIs.

+++
*** New command 'eww-copy-alternate-url'.
It copies an alternate link on the page currently visited in EWW into
the kill ring.  Alternate links are optional metadata that HTML pages
use for linking to their alternative representations, such as translated
versions or associated RSS feeds.  It is bound to 'A' by default.

+++
*** 'eww-open-in-new-buffer' supports the prefix argument.
When invoked with the prefix argument ('C-u'),
'eww-open-in-new-buffer' will not make the new buffer the current one.
This is useful for continuing reading the URL in the current buffer
when the new URL is fetched.

---
*** History navigation in EWW now behaves as in other browsers.
Previously, when navigating back and forward through page history, EWW
would add a duplicate entry to the end of the history list each time.
This made it impossible to navigate to the "end" of the history list.
Now, navigating through history in EWW simply changes your position in
the history list, allowing you to reach the end as expected.  In
addition, when browsing to a new page from a "historical" one (i.e., a
page loaded by navigating back through history), EWW deletes the history
entries newer than the current page.  To change the behavior when
browsing from "historical" pages, you can customize
'eww-before-browse-history-function'.

+++
*** 'eww-readable' now toggles display of the readable parts of a web page.
When called interactively, 'eww-readable' toggles whether to display
only the readable parts of a page or the full page.  With a positive
prefix argument, it always displays the readable parts, and with a zero
or negative prefix, it always displays the full page.

+++
*** New user option 'eww-readable-urls'.
This is a list of regular expressions matching the URLs where EWW should
display only the readable parts by default.  For more details, see
"(eww) Basics" in the EWW manual.

---
*** New user option 'eww-readable-adds-to-history'.
When non-nil (the default), calling 'eww-readable' adds a new entry to
the EWW page history.

** CC Mode

+++
*** New type of 'c-offsets-alist' element.
The cdr of such an alist element may now be a syntactic symbol.  A
source line with a syntactic element whose symbol is the car of that
alist element is indented as though it were the cdr.

+++
*** Enums now have their own syntactic symbols.
The new symbols 'enum-open', 'enum-close', 'enum-intro' and
'enum-entry' are used in the analysis of enum constructs.  Previously
they were given 'brace-list-open', etc.  These are fully described in
the CC Mode manual.

+++
*** Enums are now, by default, indented like classes, not brace-lists.
To get the old behavior back, add an element '(enum-open
. brace-list-open)' to 'c-offsets-alist' in your CC Mode style, or amend
'c-offsets-alist' likewise in any of the other ways detailed in the CC
Mode manual page "Config Basics".

** Go-ts mode

+++
*** New command 'go-ts-mode-docstring'.
This command adds a docstring comment to the current defun.  If a
comment already exists, point is only moved to the comment.  It is
bound to 'C-c C-d' in 'go-ts-mode'.

** Man mode

+++
*** New user option 'c-ts-mode-enable-doxygen'.
By default, this is nil, and the Doxygen comment blocks in C/C++ source
are highlighted like other comments.  When non-nil, Doxygen comment
blocks are syntax-highlighted if the Doxygen grammar library is
available.

** Java-ts mode

+++
*** New user option 'Man-support-remote-systems'.
This option controls whether the man page is formatted on the remote
system when the current buffer's default-directory is remote.  You can
invoke the 'man' command with a prefix argument to countermand the
value of this option for the current invocation of 'man'.

** DocView

---
*** New user option 'doc-view-mpdf-use-svg'.
If non-nil, DocView uses SVG images to display PDF documents.  The
default is non-nil if your system supports display of SVG images.

---
*** New face 'doc-view-svg-face'.
This replaces 'doc-view-svg-foreground' and 'doc-view-svg-background'.
By default, this face has black foreground on white background and
inherits from the default face.  When unsetting the foreground and
background values, the display in DocView is styled according to the
current theme.  However, this, or any non-standard values, can result in
poor contrast for documents which aren't simply black text on white
background.

---
*** DocView buffers now display a new tool bar.
This tool bar contains options for searching and navigating within the
document, replacing the incompatible items for incremental search and
editing within the default tool bar displayed in the past.

** Shortdoc

+++
*** New function 'shortdoc-function-examples'.
This function returns examples of use of a given Emacs Lisp function
from the available shortdoc information.

+++
*** New function 'shortdoc-help-fns-examples-function'.
This function inserts into the current buffer examples of use of a
given Emacs Lisp function, which it gleans from the shortdoc
information.  If you want 'describe-function' ('C-h f') to insert
examples of using the function into regular "*Help*" buffers, add the
following to your init file:

    (add-hook 'help-fns-describe-function-functions
              #'shortdoc-help-fns-examples-function)

** Package

---
*** New user option 'package-vc-register-as-project'.
When non-nil, 'package-vc-install' and 'package-vc-checkout' will
automatically register every package they install as a project, that you
can quickly select using 'project-switch-project' ('C-x p p').  Default
is t.

---
*** New user option 'package-vc-allow-build-commands'.
Controls for which packages Emacs runs extra build commands when
installing directly from the package VCS repository.

---
*** New command 'package-vc-log-incoming'.
This commands displays incoming changes for a VC package without
modifying the current checkout.

---
*** New command to start an inferior Emacs loading only specific packages.
The new command 'package-isolate' will start a new Emacs process, as
a sub-process of Emacs where you invoke the command, in a way that
causes the new process to load only some of the installed packages.
The command prompts for the packages to activate in this
sub-process, and is intended for testing Emacs and/or the packages
in a clean environment.

** Flymake

+++
*** New user option 'flymake-indicator-type'.
This controls which error indicator type Flymake should use in the
current buffer.  Depending on your preference, this can either use
fringes or margins for indicating errors, the default is 'margins'.

+++
*** New user option 'flymake-margin-indicators-string'.
It controls, for each error type, the string and its face to display as
the margin indicator.

+++
*** New user option 'flymake-autoresize-margins'.
If non-nil (the default), Flymake will resize the margins when
'flymake-mode' is turned on or off.
Only relevant if 'flymake-indicator-type' is set to 'margins'.

+++
*** New user option 'flymake-margin-indicator-position'.
It controls whether to use margins for margin indicators, and which
margin (left or right) to use.  Default is to use the left margin.

+++
*** New user option 'flymake-show-diagnostics-at-end-of-line'.
When non-nil, Flymake shows summarized descriptions of diagnostics at
the end of the line.  Depending on your preference, this can either be
distracting and easily confused with actual code, or a significant
early aid that relieves you from moving the buffer or reaching for the
mouse to consult an error message.  Default is nil.

** Flyspell

+++
*** New user option 'flyspell-check-changes'.
When non-nil, Flyspell mode spell-checks only words that you edited; it
does not check unedited words just because you move point across them.
Default is nil.

---
** JS mode.
The binding 'M-.' has been removed from the major mode keymaps in
'js-mode' and 'js-ts-mode', having it default to the global binding
which calls 'xref-find-definitions'.  If the previous one worked
better for you, use 'define-key' in your init script to bind
'js-find-symbol' to that combination again.

---
** Json mode.
'js-json-mode' does not derive from 'js-mode' any more so as not
to confuse tools like Eglot or YASnippet into thinking that those
buffers contain Javascript code.

** Python mode

---
*** New user option 'python-indent-block-paren-deeper'.
If non-nil, increase the indentation of the lines inside parens in a
header of a block when they are indented to the same level as the body
of the block, producing:

    if (some_expression
            and another_expression):
        do_something()

instead of:

    if (some_expression
        and another_expression):
        do_something()

Default is nil.

---
*** New user option 'python-interpreter-args'.
This allows the user to specify command line arguments to the non
interactive Python interpreter specified by 'python-interpreter'.

---
*** New function 'python-shell-send-block'.
It sends the python block delimited by 'python-nav-beginning-of-block'
and 'python-nav-end-of-block' to the inferior Python process.

** Inferior Python mode

---
*** Default value of 'python-shell-compilation-regexp-alist' is changed.
Support for Python's ExceptionGroup has been added, so in the Python
shell, the line indicating the source of an error in the error messages
from ExceptionGroup will be recognized as well.

** Eldoc

---
*** 'eldoc' no longer truncates to a single line by default.
Previously, the entire docstring was not available to eldoc, which made
'eldoc-echo-area-use-multiline-p' ineffective.  The old behavior may be
kept by customizing 'eldoc-echo-area-use-multiline-p'.

---
** Scheme mode.
Scheme mode now handles the regular expression literal '#/regexp/' that
is available in some Scheme implementations.
Also, it should now handle nested sexp-comments.

** Use package

+++
*** New ':vc' keyword.
This keyword enables the user to install packages using package-vc.el.

+++
*** New user option 'use-package-vc-prefer-newest'.
If non-nil, always install the newest commit of a package when using the
':vc' keyword rather than its stable release.  Default is nil.

** Gnus

+++
*** New backend 'nnfeed'.
This allows backend developers to easily create new backends for web
feeds, as inheriting backends of 'nnfeed'.

+++
*** New backend 'nnatom'.
This allow users to add Atom Syndication Format feeds to Gnus as
servers.

*** The 'nnweb-type' option 'gmane' has been removed.
The gmane.org website is, sadly, down since a number of years with no
prospect of it coming back.  Therefore, it is no longer valid to set
the server variable 'nnweb-type' to 'gmane'.

---
*** New user option 'gnus-mode-line-logo'.
This allows the user to either disable the display of any logo or
specify which logo will be displayed as part of the
buffer-identification in the mode-line of Gnus buffers.

---
*** 'gnus-summary-limit-to-age' now counts days since midnight.
"Less than 1 day" now means "since last midnight", rather than "less
than 24 hours old".

** Rmail

---
*** New commands for reading mailing lists.
The new Rmail commands 'rmail-mailing-list-post',
'rmail-mailing-list-unsubscribe', 'rmail-mailing-list-help', and
'rmail-mailing-list-archive' allow, respectively, posting to,
unsubscribing from, requesting help about, and browsing the archives
of, the mailing list from which the current email message was
delivered.

** Dictionary

---
*** New user option 'dictionary-search-interface'.
Controls how the 'dictionary-search' command prompts for and displays
dictionary definitions.  Customize this user option to 'help' to have
'dictionary-search' display definitions in a "*Help*" buffer and
provide dictionary-based minibuffer completion for word selection.
Default is nil, which means to use a "*Dictionary*" buffer.

---
*** New user option 'dictionary-read-word-prompt'.
This allows the user to customize the prompt that is used by
'dictionary-search' when asking for a word to search in the
dictionaries.

---
*** New user option 'dictionary-display-definition-function'.
This allows the user to customize the way in which 'dictionary-search'
displays word definitions.  If non-nil, this user option should be set
to a function that displays a word definition obtained from a
dictionary server.  The new function
'dictionary-display-definition-in-help-buffer' can be used to display
the definition in a "*Help*" buffer, instead of the default
"*Dictionary*" buffer.

---
*** New user option 'dictionary-read-word-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a word to search in the dictionary.  This user option
should be set to a function that lets the user select a word and
returns it as a string.  The new function
'dictionary-completing-read-word' can be used to prompt with
completion based on dictionary matches.

---
*** New user option 'dictionary-read-dictionary-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a dictionary to search in.  This user option should be set
to a function that lets the user select a dictionary and returns its
name as a string.  The new function
'dictionary-completing-read-dictionary' can be used to prompt with
completion based on dictionaries that the server supports.

---
*** The default value of 'dictionary-tooltip-dictionary' has changed.
The new default value is t, which means use the same dictionary as the
value of 'dictionary-default-dictionary'.  The previous default value
was nil, which effectively disabled 'dictionary-tooltip-mode', even if
the mode was turned on.

** Pp

+++
*** New 'pp-default-function' user option replaces 'pp-use-max-width'.
Its default value is 'pp-fill', a new default pretty-printing function,
which tries to obey 'fill-column'.

---
*** 'pp-to-string' takes an additional PP-FUNCTION argument.
This argument specifies the prettifying algorithm to use.

---
*** 'pp' and 'pp-to-string' now always include a terminating newline.
In the past they included a terminating newline in most cases but not all.

** Emacs Lisp mode

---
*** Checkdoc no longer warns about missing footer lines in some cases.
Emacs Lisp libraries have traditionally ended with a footer line
(sometimes referred to as "terminating comment").  Their purpose was to
easily detect files that had been truncated in transit on ancient and
less reliable connections:

    ;; some-cool-package.el ends here

'checkdoc' will no longer warn if that line is missing for packages that
explicitly only support Emacs 30.1 or later, as specified in the
"Package-Requires" header.  The reason for keeping the warning for
packages that support earlier versions of Emacs is that package.el in
those versions can't install packages where that line is missing.

This change affects both 'M-x checkdoc' and the corresponding flymake
backend.

---
*** Checkdoc will now flag incorrect formatting in warnings.
This affects calls to 'warn', 'lwarn', 'display-warning', and
'message-box'.

---
*** The default of 'checkdoc-verb-check-experimental-flag' is now nil.
In most cases, having it enabled leads to a large amount of false
positives.

** DocView

---
*** Dedicated buffer for plain text contents.
When switching to the plain text contents with 'doc-view-open-text',
DocView now creates a dedicated buffer to display it. 'C-c C-c' gets you
back to real DocView buffer if it still exists.

+++
*** New commands to save and restore pages in buffer-local registers.
Docview can store current page to buffer-local registers with the new
command 'doc-view-page-to-register' (bound to 'm'), and later the stored
page can be restored with 'doc-view-jump-to-register' (bound to ''').

+++
*** Docview can generate imenu index for DjVu files.
When the 'djvused' program is available, Docview can now generate imenu
index for DjVu files from its outline.
The name of the 'djvused' program can be customized by changing the user
option 'doc-view-djvused-program'.

** Tramp

+++
*** Connection method "kubernetes" supports now optional namespace.
The host name for Kubernetes connections can be of kind
[CONTAINER.]POD[%NAMESPACE], in order to specify the namespace to be
used.  This overrides the setting in 'tramp-kubernetes-namespace', if
any.

** Diff

---
*** Subroutine signatures are now supported.
CPerl mode fontifies subroutine signatures like variable declarations
which makes them visually distinct from subroutine prototypes.

+++
*** New command 'diff-revert-and-kill-hunk' bound to C-c M-r.
This command reverts the hunk at point (i.e., applies the reverse of the
hunk), and then removes the hunk from the diffs.
This is useful to undo or revert changes, committed and uncommitted, when
you are in buffers generated by 'C-x v =' and 'C-x v D'.

---
*** 'diff-file-prev' and 'diff-hunk-prev' always move to start of header.
Previously, 'diff-file-prev' and 'diff-hunk-prev' would move when point
is after the corresponding file or hunk header, but not when inside it.
Now they will always move to the start of the current header.

+++
*** New command 'diff-delete-other-hunks' bound to C-c RET n.
This command deletes all hunks other than the current hunk.  It is
useful to prepare a *vc-diff* buffer for committing a single hunk.
When the region is active, it deletes all hunks that the region does not
overlap.

** php-ts-mode

---
*** 'php-ts-mode-run-php-webserver' can now accept a custom "php.ini" file.
You can use the new optional argument CONFIG when calling
'php-ts-mode-run-php-webserver' to pass an alternative "php.ini" file to
the built-in Web server.  Interactively, when invoked with a prefix
argument, 'php-ts-mode-run-php-webserver' prompts for the config file as
well as for other connection parameters.

** Ediff

+++
*** Ediff's copy commands now apply to all changes with 'C-u' prefix.
The Ediff copy commands, bound to 'a', 'b', 'ab', etc., now copy all
changes when supplied with a universal prefix argument via 'C-u':

- 'C-u a' copies all changes from buffer A to buffer B (in 2-way diff)
  or to buffer C (in 3-way diff or merge).
- 'C-u b' copies all changes from buffer B to buffer A (in 2-way diff)
  or to buffer C (in 3-way diff or merge).
- 'C-u a b' copies all changes from buffer A to buffer B.
- 'C-u b a' copies all changes from buffer B to buffer A.
- 'C-u a c' copies all changes from buffer A to buffer C.
- 'C-u b c' copies all changes from buffer B to buffer C.
- 'C-u c a' copies all changes from buffer C to buffer A.
- 'C-u c b' copies all changes from buffer C to buffer B.

** Dired

+++
*** New user option 'dired-check-symlinks' allows disabling validity checks.
Dired uses 'file-truename' to check symbolic link validity when
fontifying them, which can be slow for remote directories.  Setting
'dired-check-symlinks' to nil disables these checks.  Defaults to t, can
be set as a connection-local variable.

** Grep

+++
*** Grep results can be edited to reflect changes in the originating file.
Like Occur Edit mode, typing 'e' in the '*grep*' buffer will now make
the 'grep' results editable.  The edits will be reflected in the buffer
visiting the originating file.  Typing 'C-c C-c' will leave the Grep
Edit mode.

** TeX modes

+++
*** New xref backend for TeX modes.
The new backend ('tex-etags') is on by default, and improves the
functionality of the standard 'xref' commands in TeX buffers.  You can
restore the standard 'etags' backend with the 'M-x xref-etags-mode'
toggle.

** Midnight mode

---
*** Change for activating the mode
Putting (require 'midnight) in your init file no longer activates the
mode.  Now, one needs to say (midnight-mode +1) instead.

** Python mode

---
*** Prefer "python" for 'python-interpreter' and 'python-shell-interpreter'.
On recent versions of mainstream GNU/Linux distributions, "python"
either does not exist or it points to Python 3.  These user options now
default to using "python", falling back to "python3" if it does not
exist.  If "python" points to Python 2 on your system, you now have to
customize these variables to "python3" if you want to use Python 3
instead.

---
*** Support 'electric-layout-mode'.


* Incompatible Lisp Changes in Emacs 30.1

+++
** Evaluating a 'lambda' returns an object of type 'interpreted-function'.
Instead of representing interpreted functions as lists that start with
either 'lambda' or 'closure', Emacs now represents them as objects
of their own 'interpreted-function' type, which is very similar
to 'byte-code-function' objects (the argument list, docstring, and
interactive forms are placed in the same slots).
Lists that start with 'lambda' are now used only for non-evaluated
functions (in other words, for source code), but for backward compatibility
reasons, 'functionp' still recognizes them as functions and you can
still call them as before.
Thus code that attempts to "dig" into the internal structure of an
interpreted function's object with the likes of 'car' or 'cdr' will
no longer work and will need to use 'aref' instead to extract its
various subparts (when 'interactive-form', 'documentation', and
'help-function-arglist' aren't adequate).

---
** The escape sequence '\x' not followed by hex digits is now an error.
Previously, '\x' without at least one hex digit denoted character code
zero (NUL) but as this was neither intended nor documented or even
known by anyone, it is now treated as an error by the Lisp reader.

---
** 'subr-native-elisp-p' is renamed to 'native-comp-function-p'.
The previous name still exists but is marked as obsolete.

+++
** 'define-globalized-minor-mode' requires that modes use 'run-mode-hooks'.
Minor modes defined with 'define-globalized-minor-mode', such as
'global-font-lock-mode', will not be enabled any more in those buffers
whose major modes fail to use 'run-mode-hooks'.  Major modes defined
with 'define-derived-mode' are not affected.  'run-mode-hooks' has been the
recommended way to run major mode hooks since Emacs 22.

+++
** 'buffer-match-p' and 'match-buffers' take '&rest ARGS'.
They used to take a single '&optional ARG' and were documented to use
an unreliable hack to try and support condition predicates that
don't accept this optional ARG.
The new semantics makes no such accommodation, but the code still
supports it (with a warning) for backward compatibility.

---
** 'post-gc-hook' runs after updating 'gcs-done' and 'gc-elapsed'.

---
** Connection-local variables are applied in buffers visiting remote files.
This overrides possible directory-local or file-local variables with
the same name.

+++
** 'copy-tree' now copies records when its optional 2nd argument is non-nil.

+++
** Regexp zero-width assertions followed by operators are better defined.
Previously, regexps such as "xy\\B*" would have ill-defined behavior.
Now any operator following a zero-width assertion applies to that
assertion only (which is useless).  For historical compatibility, an
operator character following '^' or '\`' becomes literal, but we
advise against relying on this.

+++
** Infinities and NaNs no longer act as symbols on non-IEEE platforms.
On old platforms like the VAX that do not support IEEE floating-point,
tokens like '0.0e+NaN' and '1.0e+INF' are no longer read as symbols.
Instead, the Lisp reader approximates an infinity with the nearest
finite value, and a NaN with some other non-numeric object that
provokes an error if used numerically.

+++
** Conversion of strings to and from byte-arrays works with multibyte strings.
The functions 'dbus-string-to-byte-array' and
'dbus-byte-array-to-string' now accept and return multibyte Lisp
strings, encoding to UTF-8 and decoding from UTF-8 internally.  This
means that the argument to 'dbus-byte-array-to-string' must be a valid
UTF-8 byte sequence, and the optional parameter MULTIBYTE of
'dbus-byte-array-to-string' is now obsolete and unused.  The argument of
'dbus-string-to-byte-array' should be a regular Lisp string, not a
unibyte string.

+++
** 'minibuffer-allow-text-properties' now can be set buffer-local.
'read-from-minibuffer' and functions that use it can take the
buffer-local value from the minibuffer.

+++
** 'minibuffer-allow-text-properties' now also affects completions.
When it has a non-nil value, then completion functions like
'completing-read' don't discard text properties from the returned
completion candidate.

+++
** X color support compatibility aliases are now obsolete.
The compatibility aliases 'x-defined-colors', 'x-color-defined-p',
'x-color-values', and 'x-display-color-p' are now obsolete.

+++
** 'easy-mmode-define-{minor,global}-mode' aliases are now obsolete.
Use 'define-minor-mode' and 'define-globalized-minor-mode' instead.

+++
** The 'millisec' argument of 'sleep-for' is now obsolete.
Use a float value for the first argument instead.

---
** User options 'eshell-NAME-unload-hook' are now obsolete.
These hooks were named incorrectly, and so they never actually ran
when unloading the corresponding feature.  Instead, you should use
hooks named after the feature name, like 'esh-mode-unload-hook'.

** User options 'eshell-process-wait-{seconds,milliseconds}' are now obsolete.
Instead, use 'eshell-process-wait-time', which supports floating-point
values.

---
** User option 'tramp-completion-reread-directory-timeout' has been removed.
This user option was obsoleted in Emacs 27, use
'remote-file-name-inhibit-cache' instead.

+++
** The obsolete calling convention of 'sit-for' has been removed.
That convention was: '(sit-for SECONDS MILLISEC &optional NODISP)'.

---
** 'defadvice' is marked as obsolete.
See the "(elisp) Porting Old Advice" Info node for help converting
them to use 'advice-add' or 'define-advice' instead.

---
** 'cl-old-struct-compat-mode' is marked as obsolete.
You may need to recompile your code if it was compiled with Emacs < 24.3.

---
** Old derived.el functions removed.
The following functions have been deleted because they were only used
by code compiled with Emacs < 21:
'derived-mode-init-mode-variables', 'derived-mode-merge-abbrev-tables',
'derived-mode-merge-keymaps', 'derived-mode-merge-syntax-tables',
'derived-mode-run-hooks', 'derived-mode-set-abbrev-table',
'derived-mode-set-keymap', 'derived-mode-set-syntax-table',
'derived-mode-setup-function-name'.


* Incompatible Lisp Changes in Emacs 31.1

** Nested backquotes are not supported any more in Pcase patterns.

** The 'rx' category name 'chinese-two-byte' must now be spelled correctly.
An old alternative name (without the first 'e') has been removed.

---
** All the digit characters now have the 'digit' category.
All the characters whose Unicode general-category is Nd now have the
'digit' category, whose mnemonic is '6'.  This includes both ASCII and
non-ASCII digit characters.

---
** All the symbol characters now have the 'symbol' category.
All the characters that belong to the 'symbol' script (according to
'char-script-table') now have the 'symbol' category, whose mnemonic is
'5'.

** Some libraries obsolete since Emacs 24.4 and 24.5 have been removed:
cc-compat.el, info-edit.el, meese.el, otodo-mode.el, rcompile.el,
sup-mouse.el, terminal.el, vi.el, vip.el, ws-mode.el, and yow.el.


* Lisp Changes in Emacs 31.1

+++
** The 'defcustom' :local keyword can now be 'permanent-only'.
This means that the variable's 'permanent-local' property is set to t,
without marking it as automatically buffer-local.

---
** The obsolete face attribute ':reverse-video' has been removed.
Use ':inverse-video' instead.

+++
** Support interactive D-Bus authorization.
A new ':authorizable t' parameter has been added to 'dbus-call-method'
and 'dbus-call-method-asynchronously' to allow the user to interactively
authorize the invoked D-Bus method (for example via polkit).

** The customization group 'wp' has been removed.
It has been obsolete since Emacs 26.1.  Use the group 'text' instead.

** Tree-sitter changes

+++
** New special form 'handler-bind'.
Provides a functionality similar to `condition-case` except it runs the
handler code without unwinding the stack, such that we can record the
backtrace and other dynamic state at the point of the error.
See the Info node "(elisp) Handling Errors".

+++
** New 'pop-up-frames' action alist entry for 'display-buffer'.
This has the same effect as the variable of the same name and takes
precedence over the variable when present.

** New function 'merge-ordered-lists'.
Mostly used internally to do a kind of topological sort of
inheritance hierarchies.

+++
** 'drop' is now an alias for the function 'nthcdr'.

+++
** New polymorphic comparison function 'value<'.
This function returns non-nil if the first argument is less than the
second.  It works for any two values of the same type with reasonable
ordering for numbers, strings, symbols, bool-vectors, markers, buffers
and processes.  Conses, lists, vectors and records are ordered
lexicographically.
It is intended as a convenient ordering predicate for sorting, and is
likely to be faster than hand-written Lisp functions.

+++
** New 'sort' arguments and features.
The 'sort' function can now be called using the signature

    (sort SEQ &rest KEYWORD-ARGUMENTS)

where arguments after the first are keyword/value pairs, all optional:
':key' specifies a function that produces the sorting key from an element,
':lessp' specifies the ordering predicate, defaulting to 'value<',
':reverse' is used to reverse the sorting order,
':in-place' is used for in-place sorting, as the default is now to
sort a copy of the input.

The new signature is less error-prone and reduces the need to write
ordering predicates by hand.  We recommend that you use the ':key'
argument instead of ':lessp' unless a suitable ordering predicate is
already available.  This can also be used for multi-key sorting:

    (sort seq :key (lambda (x) (list (age x) (size x) (cost x))))

sorts by the return value of 'age', then by 'size', then by 'cost'.

The old signature, '(sort SEQ PREDICATE)', can still be used and sorts
its input in-place as before.

** New API for 'derived-mode-p' and control of the graph of major modes

*** 'derived-mode-p' now takes the list of modes as a single argument.
The same holds for 'provided-mode-derived-p'.
The old calling convention where multiple modes are passed as
separate arguments is deprecated.

*** New functions to access the graph of major modes.
While 'define-derived-mode' still only supports single inheritance,
modes can declare additional parents (for tests like 'derived-mode-p')
with 'derived-mode-add-parents'.
Accessing the 'derived-mode-parent' property directly is now
deprecated in favor of the new functions 'derived-mode-set-parent'
and 'derived-mode-all-parents'.

+++
*** New variable 'treesit-language-remap-alist'.
This variable allows a user to remap one language into another, such
that creating a parser for language A actually creates a parser for
language B.  By extension, any font-lock rules or indentation rules for
language A will be applied to language B instead.

This is useful for reusing font-lock rules and indentation rules of
language A for language B, when language B is a strict superset of
language A.

+++
** New optional BUFFER argument for 'string-pixel-width'.
If supplied, 'string-pixel-width' will use any face remappings from
BUFFER when computing the string's width.

---
** New macro 'with-work-buffer'.
This macro is similar to the already existing macro 'with-temp-buffer',
except that it does not allocate a new temporary buffer on each call,
but tries to reuse those previously allocated (up to a number defined by
the new variable 'work-buffer-limit', which defaults to 10).

+++
** XLFDs are no longer restricted to 255 characters.
'font-xlfd-name' now returns an XLFD even if it is greater than 255
characters in length, provided that the LONG_XLFDs argument is true.
Other features in Emacs which employ XLFDs have been modified to
produce and understand XLFDs larger than 255 characters.

+++
** New macro 'static-if' for conditional evaluation of code.
This macro hides a form from the evaluator or byte-compiler based on a
compile-time condition.  This is handy for avoiding byte-compilation
warnings about code that will never actually run under some conditions.

+++
** Desktop notifications are now supported on the Haiku operating system.
The new function 'haiku-notifications-notify' provides a subset of the
capabilities of the 'notifications-notify' function in a manner
analogous to 'w32-notification-notify'.

** New Haiku specific variable 'haiku-pass-control-tab-to-system'.
This sets whether Emacs should pass 'C-TAB' on to the system instead of
handling it, fixing a problem where window switching would not activate
if an Emacs frame had focus on the Haiku operating system.  Default
value is t.

+++
** New value 'if-regular' for the REPLACE argument to 'insert-file-contents'.
It results in 'insert-file-contents' erasing the buffer instead of
preserving markers if the file being inserted is not a regular file,
rather than signaling an error.

+++
** New variable 'current-key-remap-sequence'.
It is bound to the key sequence that caused a call to a function bound
within 'function-key-map' or 'input-decode-map' around those calls.

+++
** The function 'key-translate' can now remove translations.
If the second argument TO is nil, the existing key translation is
removed.

+++
** New variables describing the names of built in programs.
The new variables 'ctags-program-name', 'ebrowse-program-name',
'etags-program-name', 'hexl-program-name', 'emacsclient-program-name'
'movemail-program-name', and 'rcs2log-program-name' should be used
instead of "ctags", "ebrowse", "etags", "hexl", "emacsclient", and
"rcs2log", when starting one of these built in programs in a subprocess.

+++
** New variable 'case-symbols-as-words' affects case operations for symbols.
If non-nil, then case operations such as 'upcase-initials' or
'replace-match' (with nil FIXEDCASE) will treat the entire symbol name
as a single word.  This is useful for programming languages and styles
where only the first letter of a symbol's name is ever capitalized.
The default value of this variable is nil.

---
** The 'min-width' property is now supported for overlays as well.
This 'display' property was previously supported only as text property.
Now overlays can also have this property, with the same effect for the
text "covered" by the overlay.

+++
** Returned strings from functions and macros are never docstrings.
Functions and macros whose bodies consist of a single string literal now
only return that string, and will not use it as a docstring.  Example:

    (defun sing-a-song ()
      "Sing a song.")

The above function returns the string "Sing a song." and has no
docstring.  Previously, that string was used as both the docstring and
return value, which was never what the programmer wanted.  If you want
the string to be a docstring, add an explicit return value.

This change applies to 'defun', 'defsubst', 'defmacro' and 'lambda'
forms; other defining forms such as 'cl-defun' already worked this way.

** New or changed byte-compilation warnings

---
*** Warn about missing 'lexical-binding' directive.
The compiler now warns if an Elisp file lacks the standard
'-*- lexical-binding: ... -*-' cookie on the first line.
This line typically looks something like

    ;;; My little pony mode  -*- lexical-binding: t -*-

It is needed to inform the compiler about which dialect of ELisp
your code is using: the modern dialect with lexical binding or
the old dialect with only dynamic binding.

Lexical binding avoids some name conflicts and allows the compiler to
detect more mistakes and generate more efficient code, so it is
recommended.  For how to adapt your code to lexical binding, see the
manual section "(elisp) Converting to Lexical Binding".

If your code cannot be converted to lexical binding, you can insert
the line

    ;;; -*- lexical-binding: nil -*-

first in the file to declare that it uses the old dialect.

---
*** Warn about empty bodies for more special forms and macros.
The compiler now warns about an empty body argument to 'when',
'unless', 'ignore-error' and 'with-suppressed-warnings' in addition to
the existing warnings for 'let' and 'let*'.  Example:

    (when (> x 2))

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'empty-body'.

---
*** Warn about quoted error names in 'condition-case' and 'ignore-error'.
The compiler now warns about quoted condition (error) names
in 'condition-case' and 'ignore-error'.  Example:

    (condition-case nil
        (/ x y)
      ('arith-error "division by zero"))

Quoting them adds the error name 'quote' to those handled or ignored
respectively, which was probably not intended.

---
*** Warn about comparison with literal constants without defined identity.
The compiler now warns about comparisons by identity with a literal
string, cons, vector, record, function, large integer or float as this
may not match any value at all.  Example:

    (eq x "hello")

Only literals for symbols and small integers (fixnums), including
characters, are guaranteed to have a consistent (unique) identity.
This warning applies to 'eq', 'eql', 'memq', 'memql', 'assq', 'rassq',
'remq' and 'delq'.

To compare by (structural) value, use 'equal', 'member', 'assoc',
'rassoc', 'remove' or 'delete' instead.  Floats and bignums can also
be compared using 'eql', '=' and 'memql'.  Function literals cannot be
compared reliably at all.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about 'condition-case' without handlers.
The compiler now warns when the 'condition-case' form is used without
any actual handlers, as in

    (condition-case nil (read buffer))

because it has no effect other than the execution of the body form.
In particular, no errors are caught or suppressed.  If the intention
was to catch all errors, add an explicit handler for 'error', or use
'ignore-error' or 'ignore-errors'.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about 'unwind-protect' without unwind forms.
The compiler now warns when the 'unwind-protect' form is used without
any unwind forms, as in

    (unwind-protect (read buffer))

because the behavior is identical to that of the argument; there is
no protection of any kind.  Perhaps the intended unwind forms have
been misplaced or forgotten, or the use of 'unwind-protect' could be
simplified away.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about useless trailing 'cond' clauses.
The compiler now warns when a 'cond' form contains clauses following a
default (unconditional) clause.  Example:

    (cond ((= x 0) (say "none"))
          (t (say "some"))
          (say "goodbye"))

Such a clause will never be executed, and is likely to be a mistake,
perhaps due to misplaced parens.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.

---
*** Warn about mutation of constant values.
The compiler now warns about code that modifies program constants in
some obvious cases.  Examples:

    (setcar '(1 2) 7)
    (aset [3 4] 0 8)
    (aset "abc" 1 ?d)

Such code may have unpredictable behavior because the constants are part
of the program and are not data structures generated afresh during
execution; the compiler does not expect them to change.

To avoid the warning, operate on an object created by the program
(maybe a copy of the constant), or use a non-destructive operation
instead.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'mutate-constant'.

---
*** Warn about more ignored function return values.
The compiler now warns when the return value from certain functions is
implicitly ignored.  Example:

    (progn (nreverse my-list) my-list)

will elicit a warning because it is usually pointless to call
'nreverse' on a list without using the returned value.

To silence the warning, make use of the value in some way, such as
assigning it to a variable.  You can also wrap the function call in
'(ignore ...)', or use 'with-suppressed-warnings' with the warning
name 'ignored-return-value'.

The warning will only be issued for calls to functions declared
'important-return-value' or 'side-effect-free' (but not 'error-free').

---
*** Warn about docstrings that contain control characters.
The compiler now warns about docstrings with control characters other
than newline and tab.  This is often a result of improper escaping.
Example:

    (defun my-fun ()
      "Uses c:\remote\dir\files and the key \C-x."
      ...)

where the docstring contains the four control characters 'CR', 'DEL',
'FF' and 'C-x'.

The warning name is 'docstrings-control-chars'.

---
*** The warning about wide docstrings can now be disabled separately.
Its warning name is 'docstrings-wide'.

+++
** 'fset', 'defalias' and 'defvaralias' now signal an error for cyclic aliases.
Previously, 'fset', 'defalias' and 'defvaralias' could be made to
build circular function and variable indirection chains as in

    (defalias 'able 'baker)
    (defalias 'baker 'able)

but trying to use them would sometimes make Emacs hang.  Now, an attempt
to create such a loop results in an error.

Since circular alias chains now cannot occur, 'function-alias-p',
'indirect-function' and 'indirect-variable' will never signal an error.
Their 'noerror' arguments have no effect and are therefore obsolete.

** Touch Screen support

+++
*** 'x-popup-menu' now understands touch screen events.
When a 'touchscreen-begin' or 'touchscreen-end' event is passed as the
POSITION argument, it will behave as if that event was a mouse event.

+++
*** New functions for handling touch screen events.
The new functions 'touch-screen-track-tap' and 'touch-screen-track-drag'
handle tracking common touch screen gestures from within a command.

+++
*** New parameter to 'touchscreen-end' events.
CANCEL non-nil establishes that the touch sequence has been intercepted
by programs such as window managers and should be ignored with Emacs.

---
** New variable 'inhibit-auto-fill' to temporarily prevent auto-fill.

+++
** New variable 'secondary-tool-bar-map'.
If non-nil, this variable contains a keymap of menu items that are
displayed along tool bar items defined by 'tool-bar-map'.  These items
are displayed below the tool bar if the value of 'tool-bar-position' is
'top', and above it if the value is 'bottom'.  This is used by
'modifier-bar-mode'.

---
** New variable 'completion-lazy-hilit'.
Lisp programs that present completion candidates may bind this
variable non-nil around calls to functions such as
'completion-all-completions'.  This tells the underlying completion
styles to skip eager fontification of completion candidates, which
improves performance.  Such a Lisp program can then use the
'completion-lazy-hilit' function to fontify candidates just in time.

+++
** New primitive 'buffer-last-name'.
It returns the name of a buffer before the last time it was renamed or
killed.

+++
** New primitive 'marker-last-position'.
It returns the last position of a marker in its buffer even if that
buffer has been killed.  ('marker-position' would return nil in that
case.)

** Functions and variables to transpose sexps

---
*** New helper variable 'transpose-sexps-function'.
Lisp programs can now set this variable to customize the behavior of the
'transpose-sexps' command.

---
*** New function 'transpose-sexps-default-function'.
The previous implementation of 'transpose-sexps' was moved into its own
function, to be used in 'transpose-sexps-function'.

---
*** New function 'treesit-transpose-sexps'.
Tree-sitter now unconditionally sets 'transpose-sexps-function' for all
tree-sitter enabled modes to this function.

** Functions and variables to move by program statements

+++
*** New variable 'forward-sentence-function'.
Major modes can now set this variable to customize the behavior of the
'forward-sentence' command.

---
*** New function 'forward-sentence-default-function'.
The previous implementation of 'forward-sentence' is moved into its
own function, to be bound by 'forward-sentence-function'.

+++
*** New function 'treesit-forward-sentence'.
All tree-sitter enabled modes that define 'sentence' in
'treesit-thing-settings' now set 'forward-sentence-function' to call
'treesit-forward-sentence'.

** Functions and variables to move by program sexps

+++
*** New function 'treesit-forward-sexp'.
Tree-sitter conditionally sets 'forward-sexp-function' for major modes
that have defined 'sexp' in 'treesit-thing-settings' to enable
sexp-related motion commands.

---
** New user option 'native-comp-async-warnings-errors-kind'.
It allows control of what kinds of warnings and errors from asynchronous
native compilation are reported to the parent Emacs process.  The
default is to report all errors and only important warnings.  If you
were used to customizing 'native-comp-async-report-warnings-errors' to
nil or 'silent', we suggest that you now leave it at its default value,
and see if you get only warnings that matter.

** Function 'declare' forms

+++
*** New 'ftype' function declaration.
The declaration '(ftype TYPE)' specifies the type of a function.
Example:

    (defun hello (x y)
      (declare (ftype (function (integer boolean) string)))
      ...)

specifies that the function takes two arguments, an integer and a
boolean, and returns a string.  If the compilation happens with
'compilation-safety' set to zero, this information can be used by the
native compiler to produce better code, but specifying an incorrect type
may lead to Emacs crashing.  See the Info node "(elisp) Declare Form"
for further information.

+++
*** New 'important-return-value' function declaration and property.
The declaration '(important-return-value t)' sets the
'important-return-value' property which indicates that the function
return value should probably not be thrown away implicitly.

+++
** New functions 'file-user-uid' and 'file-group-gid'.
These functions are like 'user-uid' and 'group-gid', respectively, but
are aware of file name handlers, so they will return the remote UID or
GID for remote files (or -1 if the connection has no associated user).

+++
** 'treesit-font-lock-rules' now accepts additional global keywords.
When supplied with ':default-language LANGUAGE', rules after it will
default to use 'LANGUAGE'.

---
** New optional argument to 'modify-dir-local-variable'.
An optional 5th argument FILE has been added to
'modify-dir-local-variable'.  It can be used to specify which file to
modify instead of the default ".dir-locals.el".

** Connection local variables

+++
*** New macros 'connection-local-p' and 'connection-local-value'.
The former macro returns non-nil if a variable has a connection-local
binding.  The latter macro returns the connection-local value of a
variable if any, or its current value.

** Hash tables

+++
*** ':rehash-size' and ':rehash-threshold' args no longer have any effect.
These keyword arguments are now ignored by 'make-hash-table'.  Emacs
manages the memory for all hash table objects in the same way.
The functions 'hash-table-rehash-size' and 'hash-table-rehash-threshold'
remain for compatibility but now always return the old default values.

+++
*** The printed representation has been shrunk and simplified.
The 'test' parameter is omitted if it is 'eql' (the default), as is
'data' if empty.  'rehash-size', 'rehash-threshold' and 'size' are
always omitted, and ignored if present when the object is read back in.

** Obarrays

+++
*** New obarray type.
Obarrays are now represented by an opaque type instead of using vectors.
They are created by 'obarray-make' and manage their internal storage
automatically, which means that the size parameter to 'obarray-make' can
safely be omitted.  That is, they do not become slower as they fill up.

The old vector representation is still accepted by functions operating
on obarrays, but 'obarrayp' only returns t for obarray objects.
'type-of' now returns 'obarray' for obarray objects.

Old code which (incorrectly) created "obarrays" as Lisp vectors filled
with something other than 0, as in '(make-vector N nil)', will no longer
work, and should be rewritten to use 'obarray-make'.  Alternatively, you
can fill the vector with 0.

+++
*** New function 'obarray-clear' removes all symbols from an obarray.

---
*** 'obarray-size' and 'obarray-default-size' are now obsolete.
They pertained to the internal storage size which is now irrelevant.

+++
** 'treesit-install-language-grammar' can handle local directory instead of URL.
It is now possible to pass a directory of a local repository as URL
inside 'treesit-language-source-alist', so that calling
'treesit-install-language-grammar' will avoid cloning the repository.
It may be useful, for example, for the purposes of bisecting a
treesitter grammar.

** New buffer-local variable 'tabulated-list-groups'.
It controls display and separate sorting of groups of entries.  By
default no grouping or sorting is done.

+++
** New variable 'revert-buffer-restore-functions'.
It helps to preserve various states after reverting the buffer.

---
** New text property 'context-menu-functions'.
Like the variable with the same name, it adds menus from the list that
is the value of the property to context menus shown when clicking on the
text which as this property.

---
** Detecting the end of an iteration of a keyboard macro.
'read-event', 'read-char', and 'read-char-exclusive' no longer return -1
when called at the end of an iteration of the execution of a keyboard
macro.  Instead, they will transparently continue reading available input
(e.g., from the keyboard).  If you need to detect the end of a macro
iteration, check the following condition before calling one of the
aforementioned functions:

    (and (arrayp executing-kbd-macro)
         (>= executing-kbd-macro-index (length executing-kbd-macro)))

+++
** 'vtable-update-object' updates an existing object with just two arguments.
It is now possible to update the representation of an object in a vtable
by calling 'vtable-update-object' with just the vtable and the object as
arguments.  (Previously, the OLD-OBJECT argument was required which, in
this case, would mean repeating the object in the argument list.)  When
replacing an object with a different one, passing both the new and old
objects is still necessary.

** 'vtable-insert-object' can insert "before" or at an index.
The signature of 'vtable-insert-object' has changed and is now:

    (vtable-insert-object TABLE OBJECT &optional LOCATION BEFORE)

LOCATION corresponds to the old AFTER-OBJECT argument; if BEFORE is
non-nil, the new object is inserted before the LOCATION object, making
it possible to insert a new object at the top of the table.  (Before,
this was not possible.)  In addition, LOCATION can be an integer, a
(zero-based) index into the table at which the new object is inserted
(BEFORE is ignored in this case).

+++
** New function 'sqlite-execute-batch'.
This function lets the user execute multiple SQL statements in one go.
It is useful, for example, when a Lisp program needs to evaluate an
entire SQL file.

** JSON

+++
*** 'json-serialize' now always returns a unibyte string.
This is appropriate since it is an encoding operation.  In the unlikely
event that a multibyte string is needed, the result can be decoded using

    (decode-coding-string RESULT 'utf-8)

---
*** The parser keeps duplicated object keys in alist and plist output.
A JSON object such as '{"a":1,"a":2}' will now be translated into the
Lisp values '((a . 1) (a . 2))' or '(:a 1 :a 2)' if alist or plist
object types are requested.

---
*** The parser sometimes signals different types of errors.
It will now signal 'json-utf8-decode-error' for inputs that are not
correctly UTF-8 encoded.

---
*** The parser and encoder now accept arbitrarily large integers.
Previously, they were limited to the range of signed 64-bit integers.

** New tree-sitter functions and variables for defining and using "things"

+++
*** New variable 'treesit-thing-settings'.
It allows modes to define "things" like 'defun', 'text', 'sexp', and
'sentence' for navigation commands and tree-traversal functions.

+++
*** New functions for navigating "things".
There are new navigation functions 'treesit-thing-prev',
'treesit-thing-next', 'treesit-navigate-thing',
'treesit-beginning-of-thing', and 'treesit-end-of-thing'.

+++
*** New functions 'treesit-thing-at', 'treesit-thing-at-point'.

+++
*** Tree-traversing functions.
The functions 'treesit-search-subtree', 'treesit-search-forward',
'treesit-search-forward-goto', and 'treesit-induce-sparse-tree' now
accept more kinds of predicates.  Lisp programs can now use thing
symbols (defined in 'treesit-thing-settings') and any thing definitions
for the predicate argument.

** Other tree-sitter function and variable changes

+++
*** 'treesit-parser-list' now takes additional optional arguments.
The additional arguments are LANGUAGE and TAG.  If LANGUAGE is given,
only return parsers for that language.  If TAG is given, only return
parsers with that tag.  Note that passing nil as tag doesn't mean return
all parsers, but rather "all parsers with no tags".

+++
*** New variable 'treesit-primary-parser'.
This variable should be set by multi-langauge major modes before calling
'treesit-major-mode-setup', in order for tree-sitter integration
functionalities to operate correctly.

---
** New function 'shell-command-do-open'.
This lets a Lisp program access the core functionality of the
'dired-do-open' command.  It opens a file or files using an external
program, choosing the program according to the operating system's
conventions.


* Changes in Emacs 31.1 on Non-Free Operating Systems

---
** Process execution has been optimized on Android.
The run-time performance of subprocesses on recent Android releases,
where a userspace executable loader is required, has been optimized on
systems featuring Linux 3.5.0 and above.

---
** 'NSSpeechRecognitionUsageDescription' now included in "Info.plist" (macOS).
Should Emacs (or any built-in shell) invoke a process using macOS speech
recognition APIs, the relevant permission dialog is now displayed, thus
allowing Emacs users access to speech recognition utilities.

Note: Accepting this permission allows the use of system APIs, which may
send user data to Apple’s speech recognition servers.

---
** Emacs on MS-Windows now supports GUI dialogs and message boxes better.
In particular, it is now possible to show text with embedded newlines in
a dialog popped by 'message-box'.  This is supported on Windows Vista
and later versions.


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


Local variables:
coding: utf-8
mode: outline
mode: emacs-news
paragraph-separate: "[	 ]"
end:
