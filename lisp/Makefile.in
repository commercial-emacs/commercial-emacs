### @configure_input@

# Copyright (C) 2000-2024 Free Software Foundation, Inc.

# This file is NOT part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@
VPATH = $(srcdir)
EXEEXT = @EXEEXT@

# Empty for all systems except MinGW, where xargs needs an explicit
# limitation.
XARGS_LIMIT = @XARGS_LIMIT@

HAVE_NATIVE_COMP = @HAVE_NATIVE_COMP@
NATIVE_COMPILATION_AOT = @NATIVE_COMPILATION_AOT@
ifeq ($(HAVE_NATIVE_COMP),yes)
# Environment variable to enable Ahead-Of-Time compilation.
ifndef NATIVE_FULL_AOT
NATIVE_SKIP_NONDUMP = 1
endif
# Configured for Ahead-Of-Time compilation.
ifeq ($(NATIVE_COMPILATION_AOT),yes)
NATIVE_SKIP_NONDUMP = ""
endif
endif

-include ${top_builddir}/src/verbose.mk

FIND_DELETE = @FIND_DELETE@

# You can specify a different executable on the make command line,
# e.g. "make EMACS=../src/emacs ...".

# We never change directory before running Emacs, so a relative file
# name is fine, and makes life easier.  If we need to change
# directory, we can use emacs --chdir.
EMACS = ../src/emacs${EXEEXT}

# Command line flags for Emacs.

EMACSOPT = -batch --no-site-file --no-site-lisp

# Extra flags to pass to the byte compiler
BYTE_COMPILE_EXTRA_FLAGS =
# For example to not display the undefined function warnings you can use this:
# BYTE_COMPILE_EXTRA_FLAGS = --eval '(setq byte-compile-warnings (quote (not unresolved)))'
# The example above is just for developers, it should not be used by default.

# All generated autoload files.
loaddefs = $(shell find ${srcdir} -name '*loaddefs.el' ! -name '.*')
# Elisp files auto-generated.
AUTOGENEL = ${loaddefs} ${srcdir}/cus-load.el ${srcdir}/finder-inf.el \
  ${srcdir}/subdirs.el ${srcdir}/eshell/esh-groups.el ${srcdir}/emacs-lisp/cldefs.el \
  ${srcdir}/leim/leim-list.el

BYTE_COMPILE_FLAGS = \
  --eval "(setq load-prefer-newer t byte-compile-warnings 'all)" \
  --eval "(setq org--inhibit-version-check t)" $(BYTE_COMPILE_EXTRA_FLAGS)

BYTE_COMPILER_EL = \
	emacs-lisp/macroexp.el \
	emacs-lisp/cconv.el    \
	emacs-lisp/byte-opt.el \
	emacs-lisp/bytecomp.el
ifeq ($(HAVE_NATIVE_COMP),yes)
BYTE_COMPILER_EL += emacs-lisp/comp.el
BYTE_COMPILER_EL += emacs-lisp/comp-cstr.el
endif

# Prevent any settings in the user environment causing problems.
unexport EMACSDATA EMACSDOC EMACSLOADPATH EMACSPATH

# The actual Emacs command run in the targets below.
emacs = '$(EMACS)' $(EMACSOPT)

## Subdirectories, relative to builddir.
SUBDIRS = $(sort $(shell find ${srcdir} -type d -print))
## Subdirectories, relative to srcdir.
SUBDIRS_REL = $(patsubst ${srcdir}%,.%,${SUBDIRS})
## All subdirectories except 'obsolete' and 'term'.
SUBDIRS_ALMOST = $(filter-out ${srcdir}/obsolete ${srcdir}/term,${SUBDIRS})
## All subdirectories except 'obsolete', 'term', and 'leim' (and subdirs).
## We don't want the leim files listed as packages, especially
## since many share basenames with files in language/.
SUBDIRS_FINDER = $(filter-out ${srcdir}/leim%,${SUBDIRS_ALMOST})
## All subdirectories in which we might want to create subdirs.el.
SUBDIRS_SUBDIRS = $(filter-out ${srcdir}/cedet% ${srcdir}/leim%,${SUBDIRS})

# Bootstrap a faster byte compiler sooner than later.  Ad hoc,
# unexamined list of dubious efficacy. (Bug#25556)
COMPILE_FIRST = ./emacs-lisp/loaddefs-gen.el ./emacs-lisp/radix-tree.el \
  ./emacs-lisp/eieio.el ./emacs-lisp/eieio-base.el \
  ./international/ja-dic-cnv.el \
  ./org/ox.el ./org/ox-texinfo.el ./org/org-macro.el ./org/org-element.el \
  ./org/oc.el ./org/ol.el ./emacs-lisp/cl-lib.el
all: compile ./cus-load.el ./finder-inf.el ./leim/ja-dic/ja-dic.elc ../doc/misc/org.texi ../doc/misc/modus-themes.texi
ifeq ($(HAVE_NATIVE_COMP):$(NATIVE_DISABLED),yes:)
all: compile-native
endif

PHONY_EXTRAS =
.PHONY: all custom-deps finder-data update-subdirs $(PHONY_EXTRAS)

# custom-deps and finder-data both used to scan _all_ the *.el files.
# This could lead to problems in parallel builds if automatically
# generated *.el files (eg loaddefs etc) were being changed at the same time.
# One solution was to add autoloads as a prerequisite:
# https://lists.gnu.org/r/emacs-pretest-bug/2007-01/msg00469.html
# https://lists.gnu.org/r/bug-gnu-emacs/2007-12/msg00171.html
# However, this meant that running these targets modified loaddefs.el,
# every time (due to time-stamping).  Calling these rules from
# bootstrap-after would modify loaddefs after src/emacs, resulting
# in make install remaking src/emacs for no real reason:
# https://lists.gnu.org/r/emacs-devel/2008-02/msg00311.html
# Nowadays these commands don't scan automatically generated files,
# since they will never contain any useful information
# (see finder-no-scan-regexp and custom-dependencies-no-scan-regexp).
custom-deps:
	$(AM_V_at)$(MAKE) PHONY_EXTRAS=./cus-load.el ./cus-load.el
./cus-load.el:
	$(AM_V_GEN)$(emacs) -l cus-dep \
	  --eval '(setq generated-custom-dependencies-file (unmsys--file-name "$(srcdir)/cus-load.el"))' \
	  -f custom-make-dependencies ${SUBDIRS_ALMOST}

finder-data:
	$(AM_V_at)$(MAKE) PHONY_EXTRAS=./finder-inf.el \
	  ./finder-inf.el
./finder-inf.el:
	$(AM_V_GEN)$(emacs) -l finder \
	  --eval '(setq generated-finder-keywords-file (unmsys--file-name "$(srcdir)/finder-inf.el"))' \
	  -f finder-compile-keywords-make-dist ${SUBDIRS_FINDER}

# This is the OKURO-NASI compilation trigger.
./leim/ja-dic/ja-dic.el: ./leim/leim-list.el
	$(AM_V_at)$(MAKE) -C ../leim generate-ja-dic EMACS="$(EMACS)"

../doc/misc/org.texi ../doc/misc/modus-themes.texi:
	$(AM_V_at)$(MAKE) -C ../doc/misc $@

.PHONY: autoloads
autoloads: ./loaddefs.el

./loaddefs.el: ./leim/leim-list.el
	$(emacs) $(BYTE_COMPILE_FLAGS) -f batch-byte-compile \
	  ../lisp/emacs-lisp/loaddefs-gen.el
	$(AM_V_GEN)$(emacs) \
            -l ./emacs-lisp/loaddefs-gen \
	    -f loaddefs-generate--emacs-batch ${SUBDIRS_ALMOST}

cldefs .PHONY: ./emacs-lisp/cldefs.el
./emacs-lisp/cldefs.el: ./emacs-lisp/cldefs.el.in
	$(AM_V_GEN)$(emacs) -l pp -l "cldefs.el.in" \
	    --eval "(with-temp-file (expand-file-name (unmsys--file-name \"$@\")) \
	              (insert \";; Automatically generated from cldefs.el.in.  \" \
	                \"DO NOT EDIT.\n\" \
                        \"(defconst cldefs-cl-lib-functions\n\" \
	                \"(quote \" \
	                (pp-to-string cldefs--cl-lib-functions) \
	                \"))\n\" \
	                \"(provide (quote cldefs))\n\" \
	                \";; Local Variables:\n\" \
	                \";; version-control: never\n\" \
	                \";; no-byte-compile: t\n\" \
	                \";; no-update-autoloads: t\n\" \
	                \";; coding: utf-8-emacs-unix\n\" \
	                \";; End:\n\" \
	                \";;; cldefs.el ends here\n\" \
	                ))"

# ldefs-boot.el is merely the last working loaddefs.el that was manually
# checked in.  It acts as a stopgap for the bootstrap pdump until
# loaddefs.el can be generated.
./ldefs-boot.el: ./loaddefs.el
	sed '/^;; Local Variables:/a ;; no-byte-compile: t' < $< > $@

# Overwrought load-path augmentation dates back to 1994.
./subdirs.el:
	$(AM_V_GEN)$(MAKE) update-subdirs
update-subdirs:
	$(AM_V_at)for file in ${SUBDIRS_SUBDIRS}; do \
	   $(srcdir)/../build-aux/update-subdirs $$file; \
	done;

.PHONY: updates repo-update update-authors

# Some modes of make-dist use this.
updates: update-subdirs finder-data custom-deps

repo-update: compile finder-data custom-deps

update-authors:
	$(emacs) -L "$(top_srcdir)/admin" -l authors \
	  -f batch-update-authors "$(top_srcdir)/etc/AUTHORS" "$(top_srcdir)"

tagsfiles = $(shell find ${srcdir} -name '*.el' \
	        ! -name '.*' ! -name '*loaddefs.el' ! -name '*cldefs.el')
tagsfiles := $(filter-out ${srcdir}/ldefs-boot.el,${tagsfiles})
tagsfiles := $(filter-out ${srcdir}/eshell/esh-groups.el,${tagsfiles})

ETAGS = ../lib-src/etags${EXEEXT}

${ETAGS}:
	${MAKE} -C ../lib-src $(notdir $@)

## The use of xargs is to stop the command line getting too long
## on MS Windows, when the MSYS Bash passes it to a MinGW compiled
## etags.  But maybe this is not even necessary any more now
## that this uses relative filenames.
TAGS: ${ETAGS} ${tagsfiles}
	$(AM_V_GEN)rm -f $@
	$(AM_V_at)touch $@
	$(AM_V_at)ls ${tagsfiles} | xargs $(XARGS_LIMIT) "${ETAGS}" -a -o $@

define byte-compile
	$(AM_V_ELC)$(emacs) $(BYTE_COMPILE_FLAGS) -f batch-byte-compile $<
endef

$(BYTE_COMPILER_EL:.el=.elc): %.elc : %.el $(top_srcdir)/src/lread.c
	$(call byte-compile)
%.elc: %.el $(BYTE_COMPILER_EL:.el=.elc)
	$(call byte-compile)

ifeq ($(HAVE_NATIVE_COMP):$(NATIVE_DISABLED),yes:)
%.eln: %.el $(BYTE_COMPILER_EL:.el=.elc)
	$(AM_V_ELN)$(emacs) $(BYTE_COMPILE_FLAGS) -l comp \
	    --eval "(native-compile \"./$<\" \"./$@\")"
endif

define compile-rest
$(filter-out $(BYTE_COMPILER_EL:.el=.elc) $(COMPILE_FIRST:.el=.elc),$(shell for el in `echo "${SUBDIRS_REL} " | \
            sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.el |g'`; \
    do \
      test -f $$el || continue; \
      test ! -f $${el}c && \
        GREP_OPTIONS= grep '^;.*[^a-zA-Z]no-byte-compile: *t' $$el > /dev/null && \
        continue; \
      echo "$${el}c"; \
    done | xargs $(XARGS_LIMIT) echo))
endef

.PHONY: compile-compiler
compile-compiler: $(BYTE_COMPILER_EL:.el=.elc)

.SECONDEXPANSION:
.PHONY: compile
compile: compile-clean compile-compiler $(COMPILE_FIRST:.el=.elc) $$(compile-rest)

ifeq ($(HAVE_NATIVE_COMP),yes)
.PHONY: compile-native
compile-native: $(compile-rest:.elc=.eln)
endif

.PHONY: compile-clean
# Erase left-over .elc files that do not have a corresponding .el file.
compile-clean:
	@elcs=`echo "${SUBDIRS_REL} " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.elc |g'`; \
	for el in `echo $$elcs | sed -e 's/\.elc/\.el/g'`; do \
	  if test -f "$$el" || test ! -f "$${el}c"; then :; else \
	    echo rm "$${el}c"; \
	    rm "$${el}c"; \
	  fi; \
	done

./leim/leim-list.el: ./international/titdic-cnv.elc
	$(MAKE) -C ../leim all EMACS="$(EMACS)"

# Force world rebuild.
.PHONY: compile-always
compile-always:
	find . -name '*.elc' $(FIND_DELETE)
	@$(MAKE) compile

ifeq ($(HAVE_NATIVE_COMP),yes)
.PHONY: trampolines compile-eln-aot
trampolines: compile
	$(emacs) -l comp -f comp-compile-all-trampolines
compile-eln-aot:
	# this was obviously the wrong way to do this
	@(els=`echo "${SUBDIRS_REL} " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.el |g'`; \
	for el in $$els; do                          \
	  test -f $$el || continue; 		     \
	  test -f $${el}c || continue; 		     \
	  GREP_OPTIONS= grep '^;.*[^a-zA-Z]no-byte-compile: *t' $$el > /dev/null && \
	      continue; 			     \
	  GREP_OPTIONS= grep '^;.*[^a-zA-Z]no-native-compile: *t' $$el > /dev/null && \
	      continue; 			     \
	  echo "$${el}n";                            \
	done | xargs $(XARGS_LIMIT) echo) |	     \
	while read chunk; do			     \
	  $(MAKE) "$$chunk";                         \
	done
endif

.PHONY: backup-compiled-files compile-after-backup

# Backup compiled Lisp files in elc.tar.gz.  If that file already
# exists, make a backup of it.

backup-compiled-files:
	-mv ./elc.tar.gz ./elc.tar.gz~
	-tar czf ./elc.tar.gz ./*.elc ./*/*.elc ./*/*/*.elc ./*/*/*/*.elc

# Compile Lisp files, but save old compiled files first.

compile-after-backup: backup-compiled-files compile-always

# This does the same job as the "compile" rule, but in a different way.
# Rather than spawning a separate Emacs instance to compile each file,
# it uses the same Emacs instance to compile everything.
# This is faster on a single core, since it avoids the overhead of
# starting Emacs many times (it was 33% faster on a test with a
# random 10% of the .el files needing recompilation).
# Unlike compile, this is not parallelizable; so if you have more than
# one core and use make -j#, compile will be (much) faster.
# This rule also produces less accurate compilation warnings.
# The environment of later files is affected by definitions in
# earlier ones, so it does not produce some warnings that it should.
# It can also produces spurious warnings about "invalid byte code" if
# files that use byte-compile-dynamic are updated.
# There is no reason to use this rule unless you only have a single
# core and CPU time is an issue.
.PHONY: compile-one-process
compile-one-process: compile-compiler
	$(emacs) $(BYTE_COMPILE_FLAGS) \
	    --eval "(batch-byte-recompile-directory 0)" .

.PHONY: bootstrap-clean distclean maintainer-clean

bootstrap-clean:
	find . -name '*.elc' $(FIND_DELETE)
	rm -f $(AUTOGENEL)

distclean:
	-rm -f ./Makefile ./loaddefs.el ./emacs-lisp/cldefs.el

maintainer-clean: distclean bootstrap-clean
	rm -f TAGS

.PHONY: check-declare

check-declare:
	$(emacs) -l check-declare --eval '(check-declare-directory ".")'

## This finds a lot of duplicates between foo.el and obsolete/foo.el.
check-defun-dups:
	sed -n -e '/^(defun /s/\(.\)(.*/\1/p' \
	  `find . -name '*.el' ! -name '.*' -print | \
	  grep -Ev '(loaddefs|ldefs-boot)\.el|obsolete'` | sort | uniq -d

# Dependencies

## None of the following matters for bootstrap, which is the only way
## to ensure a correct compilation of all lisp files.
## Manually specifying dependencies of a handful of lisp files, (and
## ones that don't change very often at that) seems pretty pointless
## to me.

# https://debbugs.gnu.org/1004
# CC Mode uses a compile time macro system which causes a compile time
# dependency in cc-*.elc files on the macros in other cc-*.el and the
# version string in cc-defs.el.
./progmodes/cc-align.elc\
 ./progmodes/cc-cmds.elc ./progmodes/cc-compat.elc\
 ./progmodes/cc-engine.elc ./progmodes/cc-fonts.elc\
 ./progmodes/cc-langs.elc ./progmodes/cc-menus.elc\
 ./progmodes/cc-mode.elc ./progmodes/cc-styles.elc\
 ./progmodes/cc-vars.elc: \
   ./progmodes/cc-bytecomp.elc ./progmodes/cc-defs.elc

./progmodes/cc-align.elc ./progmodes/cc-cmds.elc: \
   ./progmodes/cc-vars.elc ./progmodes/cc-engine.elc

./progmodes/cc-compat.elc: \
   ./progmodes/cc-vars.elc ./progmodes/cc-styles.elc \
   ./progmodes/cc-engine.elc

./progmodes/cc-defs.elc: ./progmodes/cc-bytecomp.elc

./progmodes/cc-engine.elc: ./progmodes/cc-langs.elc \
   ./progmodes/cc-vars.elc

./progmodes/cc-fonts.elc: ./progmodes/cc-langs.elc \
   ./progmodes/cc-vars.elc ./progmodes/cc-engine.elc

./progmodes/cc-langs.elc: ./progmodes/cc-vars.elc

./progmodes/cc-mode.elc: ./progmodes/cc-langs.elc \
   ./progmodes/cc-vars.elc ./progmodes/cc-engine.elc \
   ./progmodes/cc-styles.elc ./progmodes/cc-cmds.elc \
   ./progmodes/cc-align.elc ./progmodes/cc-menus.elc

./progmodes/cc-styles.elc: ./progmodes/cc-vars.elc \
   ./progmodes/cc-align.elc

# https://debbugs.gnu.org/43037
# js.elc (like all modes using CC Mode's compile time macros) needs to
# be compiled under the same version of CC Mode it will run with.
./progmodes/js.elc: ./progmodes/cc-defs.elc \
   ./progmodes/cc-engine.elc ./progmodes/cc-mode.elc

# Makefile ends here.
