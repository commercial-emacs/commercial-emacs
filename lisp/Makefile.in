### @configure_input@

# Copyright (C) 2000-2024 Free Software Foundation, Inc.

# This file is NOT part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@
VPATH = $(srcdir)
EXEEXT = @EXEEXT@

# MinGW xargs needs an explicit limitation.
XARGS_LIMIT = @XARGS_LIMIT@

HAVE_NATIVE_COMP = @HAVE_NATIVE_COMP@

-include ${top_builddir}/src/verbose.mk

FIND_DELETE = @FIND_DELETE@

EMACS = ../src/emacs${EXEEXT}

EMACSOPT = -Q -batch

BYTE_COMPILE_EXTRA_FLAGS =

# loaddefs is a confusing historical name for autoloads
loaddefs = $(shell find ${srcdir} -name '*loaddefs.el' ! -name '.*')

ifeq ($(HAVE_NATIVE_COMP),yes)
TARGET_EXT = eln
TARGET_REGEX = byte\|native
else
TARGET_EXT = elc
TARGET_REGEX = byte
endif

BYTE_COMPILE_FLAGS = \
  --eval "(custom-set-variables (quote (byte-compile-warnings (quote all))))" \
  $(BYTE_COMPILE_EXTRA_FLAGS)

ifeq ($(HAVE_NATIVE_COMP),yes)
BYTE_COMPILE_FLAGS += \
  -l comp --eval "(setq native-comp-disable-subr-trampolines t)"
endif

BYTE_COMPILER_EL = \
	emacs-lisp/macroexp.el \
	emacs-lisp/cconv.el    \
	emacs-lisp/byte-opt.el \
	emacs-lisp/bytecomp.el
ifeq ($(HAVE_NATIVE_COMP),yes)
BYTE_COMPILER_EL += \
       emacs-lisp/comp-common.el \
       emacs-lisp/comp-cstr.el \
       emacs-lisp/comp-run.el \
       emacs-lisp/comp.el
endif

# Prevent any settings in the user environment causing problems.
unexport EMACSDATA EMACSDOC EMACSLOADPATH EMACSPATH EMACSNATIVELOADPATH

# The actual Emacs command run in the targets below.
emacs = '$(EMACS)' $(EMACSOPT)

## Subdirectories, relative to builddir.
SUBDIRS = $(sort $(shell find ${srcdir} -type d -print))
## Subdirectories, relative to srcdir.
SUBDIRS_REL = $(patsubst ${srcdir}%,.%,${SUBDIRS})
## All subdirectories except 'obsolete' and 'term'.
SUBDIRS_ALMOST = $(filter-out ${srcdir}/obsolete ${srcdir}/term,${SUBDIRS})
## All subdirectories except 'obsolete', 'term', and 'leim' (and subdirs).
## We don't want the leim files listed as packages, especially
## since many share basenames with files in language/.
SUBDIRS_FINDER = $(filter-out ${srcdir}/leim%,${SUBDIRS_ALMOST})
## All subdirectories in which we might want to create subdirs.el.
SUBDIRS_SUBDIRS = $(filter-out ${srcdir}/cedet% ${srcdir}/leim%,${SUBDIRS})

# Bootstrap a faster byte compiler sooner than later.  Ad hoc,
# unexamined list of dubious efficacy. (Bug#25556)
COMPILE_FIRST = ./emacs-lisp/loaddefs-gen.el ./emacs-lisp/radix-tree.el \
  ./emacs-lisp/eieio.el ./emacs-lisp/eieio-base.el \
  ./international/ja-dic-cnv.el \
  ./org/ox.el ./org/ox-texinfo.el ./org/org-macro.el ./org/org-element.el \
  ./org/oc.el ./org/ol.el ./emacs-lisp/cl-lib.el

.DEFAULT_GOAL = all

.PHONY: none
none:
	@true

.PHONY: all
all: compile ./cus-load.el ./finder-inf.el ./emacs-lisp/cldefs.el

.PHONY: autoloads
autoloads: ./loaddefs.el

./loaddefs.el: ./leim/leim-list.el
	$(emacs) $(BYTE_COMPILE_FLAGS) -f batch-byte-compile \
	  ../lisp/emacs-lisp/loaddefs-gen.el
	$(AM_V_GEN)$(emacs) \
            -l ./emacs-lisp/loaddefs-gen \
	    -f loaddefs-generate--emacs-batch ${SUBDIRS_ALMOST}

./emacs-lisp/cldefs.el: ./emacs-lisp/cldefs.el.in
	$(AM_V_GEN)$(emacs) -l pp -l "cldefs.el.in" \
	    --eval "(with-temp-file (expand-file-name (unmsys--file-name \"$@\")) \
	              (insert \";; Automatically generated from cldefs.el.in. \" \
	                \"DO NOT EDIT  -*- lexical-binding: t -*-\n\" \
                        \"(defconst cldefs-cl-lib-functions\n\" \
	                \"(quote \" \
	                (pp-to-string cldefs--cl-lib-functions) \
	                \"))\n\" \
	                \"(provide (quote cldefs))\n\" \
	                \";; Local Variables:\n\" \
	                \";; version-control: never\n\" \
	                \";; no-byte-compile: t\n\" \
	                \";; no-update-autoloads: t\n\" \
	                \";; coding: utf-8-emacs-unix\n\" \
	                \";; End:\n\" \
	                \";;; cldefs.el ends here\n\" \
	                ))"

# Overwrought load-path augmentation dates back to 1994.
./subdirs.el:
	$(AM_V_GEN)for file in ${SUBDIRS_SUBDIRS}; do \
	   $(srcdir)/../build-aux/update-subdirs $$file; \
	done;

./cus-load.el:
	$(AM_V_GEN)$(emacs) -l cus-dep \
	  --eval '(setq generated-custom-dependencies-file (unmsys--file-name "$(srcdir)/cus-load.el"))' \
	  -f custom-make-dependencies ${SUBDIRS_ALMOST}

./finder-inf.el:
	$(AM_V_GEN)$(emacs) -l finder \
	  --eval '(setq generated-finder-keywords-file (unmsys--file-name "$(srcdir)/finder-inf.el"))' \
	  -f finder-compile-keywords-make-dist ${SUBDIRS_FINDER}

.PHONY: update-authors
update-authors:
	$(emacs) -L "$(top_srcdir)/admin" -l authors \
	  -f batch-update-authors "$(top_srcdir)/etc/AUTHORS" "$(top_srcdir)"

tagsfiles = $(shell find ${srcdir} -name '*.el' \
	        ! -name '.*' ! -name '*loaddefs.el' ! -name '*cldefs.el')
tagsfiles := $(filter-out ${srcdir}/ldefs-boot.el,${tagsfiles})
tagsfiles := $(filter-out ${srcdir}/eshell/esh-groups.el,${tagsfiles})

ETAGS = ../lib-src/etags${EXEEXT}

${ETAGS}:
	${MAKE} -C ../lib-src $(notdir $@)

TAGS: ${ETAGS} ${tagsfiles}
	$(AM_V_GEN)rm -f $@
	$(AM_V_at)touch $@
	$(AM_V_at)ls ${tagsfiles} | xargs $(XARGS_LIMIT) "${ETAGS}" -a -o $@

define byte-compile
	$(AM_V_ELC)$(emacs) $(BYTE_COMPILE_FLAGS) -f batch-byte-compile $<
endef

define native-compile
	$(AM_V_ELN)$(emacs) $(BYTE_COMPILE_FLAGS) \
	    --eval "(native-compile \"./$<\" \"./$@\")"
endef

%.elc: %.el $(BYTE_COMPILER_EL:.el=.elc)
	$(call byte-compile)
$(BYTE_COMPILER_EL:.el=.elc): %.elc : %.el $(top_srcdir)/src/lread.c
	$(call byte-compile)

%.eln: %.el $(BYTE_COMPILER_EL:.el=.eln)
	$(call native-compile)
$(BYTE_COMPILER_EL:.el=.eln): %.eln : %.el $(top_srcdir)/src/lread.c
	$(call native-compile)

# grep is the wrong way of doing this (hack-local-variables better).
define compile-rest
$(filter-out $(BYTE_COMPILER_EL:.el=.$(TARGET_EXT)) $(COMPILE_FIRST:.el=.$(TARGET_EXT)), $(shell \
  read -a arr <<<`find . -type f -name '*.el' -exec grep -L '^;.*[^a-zA-Z]no-\($(TARGET_REGEX)\)-compile: *t' {} + | sort | xargs $(XARGS_LIMIT) echo`; \
  arr=( "$${arr[@]/%.el/.$(TARGET_EXT)}" ); \
  echo "$${arr[*]}"; \
))
endef

.SECONDEXPANSION:
.PHONY: compile
compile: $(BYTE_COMPILER_EL:.el=.$(TARGET_EXT)) \
  $(COMPILE_FIRST:.el=.$(TARGET_EXT)) \
  $$(call compile-rest)

./leim/leim-list.el: ./international/titdic-cnv.$(TARGET_EXT)
	$(MAKE) -C ../leim all EMACS="$(EMACS)"

ifeq ($(HAVE_NATIVE_COMP),yes)
.PHONY: trampolines
trampolines: compile
	$(emacs) $(BYTE_COMPILE_FLAGS) -f comp-compile-all-trampolines
endif

.PHONY: bootstrap-clean
bootstrap-clean:
	find . \( -name '*.elc' -o -name '*.eln' \) $(FIND_DELETE)

# ldefs-boot.el is merely the last working loaddefs.el that was manually
# checked in.  It acts as a stopgap for the bootstrap pdump until
# loaddefs.el can be generated.
./ldefs-boot.el: ./loaddefs.el
	@sed '/^;; Local Variables:/a ;; no-byte-compile: t' < $< > $@

# Pain-in-the-ass OKURO-NASI trigger.
./leim/ja-dic/ja-dic.el: ./leim/leim-list.el
	$(AM_V_at)$(MAKE) -C ../leim generate-ja-dic EMACS="$(EMACS)"

.PHONY: check-declare
check-declare:
	$(emacs) -l check-declare --eval '(check-declare-directory ".")'
