# Copyright (C) 2017-2021 Free Software Foundation, Inc.
#
#  This file is NOT part of GNU Emacs.
#
#  GNU Emacs is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  GNU Emacs is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

# GNU Emacs support for the GitLab protocol for CI.

# The presence of this file does not imply any FSF/GNU endorsement of
# any particular service that uses that protocol.  Also, it is intended for
# evaluation purposes, thus possibly temporary.

# Maintainer: Ted Zlatanov <tzz@lifelogs.com>
# URL: https://emba.gnu.org/emacs/emacs

# Include defaults.
include: '/test/infra/default-gitlab-ci.yml'

stages:
  - build-images
  - generator
  - trigger
#  - fast
#  - normal
  - platform-images
  - platforms
  - native-comp-images
  - native-comp
  - slow

build-image-inotify:
  stage: build-images
  extends: [.job-template, .build-template]
  variables:
    target: emacs-inotify

# test-fast-inotify:
#   stage: fast
#   extends: [.job-template, .test-template]
#   variables:
#     target: emacs-inotify
#     make_params: "-C test check"

test-jobs-generator:
  stage: generator
  script:
    - test/infra/test-jobs-generator.sh > test-jobs.yml
  artifacts:
    paths:
      - test-jobs.yml

test-jobs-pipeline:
  stage: trigger
  trigger:
    include:
      - local: '/test/infra/default-gitlab-ci.yml'
      - artifact: test-jobs.yml
        job: test-jobs-generator
    strategy: depend

# test-lisp-inotify:
#   stage: normal
#   extends: [.job-template, .test-template]
#   variables:
#     target: emacs-inotify
#     make_params: "-C test check-lisp"

# test-lisp-net-inotify:
#   stage: normal
#   extends: [.job-template, .test-template]
#   variables:
#     target: emacs-inotify
#     make_params: "-C test check-lisp-net"

build-image-filenotify-gio:
  stage: platform-images
  extends: [.job-template, .build-template, .filenotify-gio-template]
  variables:
    target: emacs-filenotify-gio

build-image-gnustep:
  stage: platform-images
  extends: [.job-template, .build-template, .gnustep-template]
  variables:
    target: emacs-gnustep

test-filenotify-gio:
  # This tests file monitor libraries gfilemonitor and gio.
  stage: platforms
  needs: [build-image-filenotify-gio]
  extends: [.job-template, .test-template, .filenotify-gio-template]
  variables:
    target: emacs-filenotify-gio
    make_params: "-k -C test autorevert-tests.log filenotify-tests.log"

test-gnustep:
  # This tests the GNUstep build process.
  stage: platforms
  needs: [build-image-gnustep]
  extends: [.job-template, .gnustep-template]
  variables:
    target: emacs-gnustep
    make_params: install

build-native-comp-speed0:
  stage: native-comp-images
  extends: [.job-template, .build-template, .native-comp-template]
  variables:
    target: emacs-native-comp-speed0

build-native-comp-speed1:
  stage: native-comp-images
  extends: [.job-template, .build-template, .native-comp-template]
  variables:
    target: emacs-native-comp-speed1

build-native-comp-speed2:
  stage: native-comp-images
  extends: [.job-template, .build-template, .native-comp-template]
  variables:
    target: emacs-native-comp-speed2

test-native-comp-speed0:
  stage: native-comp
  needs: [build-native-comp-speed0]
  extends: [.job-template, .test-template, .native-comp-template]
  variables:
    target: emacs-native-comp-speed0
    make_params: "-C test check SELECTOR='(not (tag :unstable))'"

test-all-inotify:
  # This tests also file monitor libraries inotify and inotifywatch.
  stage: slow
  needs: [build-image-inotify]
  extends: [.job-template, .test-template]
  rules:
    # Note there's no "changes" section, so this always runs on a schedule.
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  variables:
    target: emacs-inotify
    make_params: check-expensive
    # Two hours.
    EMACS_TEST_TIMEOUT: 7200

# Local Variables:
# add-log-current-defun-header-regexp: "^\\([-_.[:alnum:]]+\\)[ \t]*:"
# End:
