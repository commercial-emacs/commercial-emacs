### @configure_input@

# Copyright (C) 1985, 1987-1988, 1993-1995, 1999-2024 Free Software
# Foundation, Inc.

# This file is NOT part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

SHELL = @SHELL@

# Here are the things that we expect ../configure to edit.
# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir = @srcdir@
top_builddir = @top_builddir@
# MinGW CPPFLAGS uses this and fails enigmatically without it.
abs_top_srcdir=@abs_top_srcdir@
VPATH = $(srcdir)
CC = @CC@
CXX = @CXX@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
EXEEXT = @EXEEXT@
version = @version@
MKDIR_P = @MKDIR_P@
# Don't use LIBS.  configure puts stuff in it that either shouldn't be
# linked with Emacs or is duplicated by the other stuff below.
# LIBS = @LIBS@

LIBOBJS = @LIBOBJS@

lib = ../lib
libsrc = ../lib-src
etc = ../etc
oldXMenudir = ../oldXMenu
lwlibdir = ../lwlib

# Configuration files for .o files to depend on.
config_h = config.h $(srcdir)/conf_post.h

HAVE_NATIVE_COMP = @HAVE_NATIVE_COMP@
NATIVE_COMPILATION_AOT = @NATIVE_COMPILATION_AOT@

## Flags to pass for profiling builds
PROFILING_CFLAGS = @PROFILING_CFLAGS@

## Flags to pass to the compiler to enable build warnings
WARN_CFLAGS = @WARN_CFLAGS@
WERROR_CFLAGS = @WERROR_CFLAGS@

## Machine-specific CFLAGS.
C_SWITCH_MACHINE=@C_SWITCH_MACHINE@
## System-specific CFLAGS.
C_SWITCH_SYSTEM=@C_SWITCH_SYSTEM@

GNUSTEP_CFLAGS=@GNUSTEP_CFLAGS@
PNG_CFLAGS=@PNG_CFLAGS@

## Define C_SWITCH_X_SITE to contain any special flags your compiler
## may need to deal with X Windows.  For instance, if you've defined
## HAVE_X_WINDOWS and your X include files aren't in a place that your
## compiler can find on its own, you might want to add "-I/..." or
## something similar.  This is normally set by configure.
C_SWITCH_X_SITE=@C_SWITCH_X_SITE@

## Define LD_SWITCH_X_SITE to contain any special flags your loader
## may need to deal with X Windows.  For instance, if your X libraries
## aren't in a place that your loader can find on its own, you might
## want to add "-L/..." or something similar.  Only used if
## HAVE_X_WINDOWS.
## FIXME? configure sets a value for this, but it has never been
## substituted in this or any other Makefile. Cf C_SWITCH_X_SITE.
LD_SWITCH_X_SITE=

## This must come before LD_SWITCH_SYSTEM.
## If needed, a -rpath option that says where to find X windows at run time.
LD_SWITCH_X_SITE_RPATH=@LD_SWITCH_X_SITE_RPATH@

## System-specific LDFLAGS.
LD_SWITCH_SYSTEM=@LD_SWITCH_SYSTEM@

## This holds any special options for linking emacs only (i.e., not
## used by configure).
LD_SWITCH_SYSTEM_EMACS=@LD_SWITCH_SYSTEM_EMACS@

## Flags to pass to ld only for emacs.
EMACS_LDFLAGS = $(LD_SWITCH_SYSTEM) $(LD_SWITCH_SYSTEM_EMACS)

## Some systems define this to request special libraries.
LIBS_SYSTEM=@LIBS_SYSTEM@

## -lm, or empty.
LIB_MATH=@LIB_MATH@

## -lpthread, or empty.
LIB_PTHREAD=@LIB_PTHREAD@

LIBIMAGE=@LIBTIFF@ @LIBJPEG@ @LIBPNG@ @LIBGIF@ @LIBXPM@ @WEBP_LIBS@

XCB_LIBS=@XCB_LIBS@
XFT_LIBS=@XFT_LIBS@
XRENDER_LIBS=@XRENDER_LIBS@
LIBX_EXTRA=-lX11 $(XCB_LIBS) $(XFT_LIBS) $(XRENDER_LIBS)

FONTCONFIG_CFLAGS = @FONTCONFIG_CFLAGS@
FONTCONFIG_LIBS = @FONTCONFIG_LIBS@
FREETYPE_CFLAGS = @FREETYPE_CFLAGS@
FREETYPE_LIBS = @FREETYPE_LIBS@
HARFBUZZ_CFLAGS = @HARFBUZZ_CFLAGS@
HARFBUZZ_LIBS = @HARFBUZZ_LIBS@
LIBOTF_CFLAGS = @LIBOTF_CFLAGS@
LIBOTF_LIBS = @LIBOTF_LIBS@
M17N_FLT_CFLAGS = @M17N_FLT_CFLAGS@
M17N_FLT_LIBS = @M17N_FLT_LIBS@

LIB_ACL=@LIB_ACL@
CLOCK_TIME_LIB=@CLOCK_TIME_LIB@
EUIDACCESS_LIBGEN=@EUIDACCESS_LIBGEN@
NANOSLEEP_LIB=@NANOSLEEP_LIB@
QCOPY_ACL_LIB=@QCOPY_ACL_LIB@
TIMER_TIME_LIB=@TIMER_TIME_LIB@

DBUS_CFLAGS = @DBUS_CFLAGS@
DBUS_LIBS = @DBUS_LIBS@
## dbusbind.o if HAVE_DBUS, else empty.
DBUS_OBJ = @DBUS_OBJ@

## xwidgets.o if HAVE_XWIDGETS, else empty.
XWIDGETS_OBJ = @XWIDGETS_OBJ@

LIB_EXECINFO=@LIB_EXECINFO@

SETTINGS_CFLAGS = @SETTINGS_CFLAGS@
SETTINGS_LIBS = @SETTINGS_LIBS@

## gtkutil.o if USE_GTK, else empty.
GTK_OBJ=@GTK_OBJ@

## inotify.o if HAVE_INOTIFY.
## kqueue.o if HAVE_KQUEUE.
## gfilenotify.o if HAVE_GFILENOTIFY.
## w32notify.o if HAVE_W32NOTIFY.
NOTIFY_OBJ = @NOTIFY_OBJ@
NOTIFY_CFLAGS = @NOTIFY_CFLAGS@
NOTIFY_LIBS = @NOTIFY_LIBS@

## -ltermcap, or -lncurses, or -lcurses, or "".
LIBS_TERMCAP=@LIBS_TERMCAP@
## terminfo.o if TERMINFO, else (on MS-DOS only: termcap.o +) tparam.o.
TERMCAP_OBJ=@TERMCAP_OBJ@

LIBXMU=@LIBXMU@

LIBXSM=@LIBXSM@

LIBXTR6=@LIBXTR6@

## $(LIBXMU) -lXt $(LIBXTR6) -lXext if USE_X_TOOLKIT, else $(LIBXSM).
## Only used if HAVE_X_WINDOWS.
LIBXT_OTHER=@LIBXT_OTHER@

## If !HAVE_X11 || USE_GTK, empty.
## Else if USE_X_TOOLKIT, $(lwlibdir)/liblw.a.
## Else $(oldXMenudir)/libXMenu11.a.
LIBXMENU=@LIBXMENU@

## xmenu.o if HAVE_X_WINDOWS, else empty.
XMENU_OBJ=@XMENU_OBJ@
## xterm.o xfns.o xselect.o xrdb.o xsmfns.o xsettings.o if
## HAVE_X_WINDOWS, else empty.
XOBJ=@XOBJ@

# xgselect.o if linking with GLib, else empty
XGSELOBJ=@XGSELOBJ@

TOOLKIT_LIBW=@TOOLKIT_LIBW@

## Only used if HAVE_X11, in LIBX_OTHER.
LIBXT=$(TOOLKIT_LIBW) $(LIBXT_OTHER)

## If HAVE_X11, $(LIBXT) $(LIBX_EXTRA), else empty.
LIBX_OTHER=@LIBX_OTHER@

## LIBXMENU is empty if !HAVE_X_WINDOWS.
## LD_SWITCH_X_SITE should not be used if not using X, but nothing
## sets it at present, and if something ever does, it should be
## configure, which should set it to nil in non-X builds.
LIBX_BASE=$(LIBXMENU) $(LD_SWITCH_X_SITE)

## Used only for GNUstep.
LIBS_GNUSTEP=$(patsubst -specs=%-hardened-ld,,@LIBS_GNUSTEP@)

LIBSOUND= @LIBSOUND@
CFLAGS_SOUND= @CFLAGS_SOUND@

RSVG_LIBS= @RSVG_LIBS@
RSVG_CFLAGS= @RSVG_CFLAGS@

WEBP_CFLAGS= @WEBP_CFLAGS@

WEBKIT_LIBS= @WEBKIT_LIBS@
WEBKIT_CFLAGS= @WEBKIT_CFLAGS@

CAIRO_LIBS= @CAIRO_LIBS@
CAIRO_CFLAGS= @CAIRO_CFLAGS@

IMAGEMAGICK_LIBS= @IMAGEMAGICK_LIBS@
IMAGEMAGICK_CFLAGS= @IMAGEMAGICK_CFLAGS@

LIBXML2_LIBS = @LIBXML2_LIBS@
LIBXML2_CFLAGS = @LIBXML2_CFLAGS@

SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_OBJ = @SQLITE3_OBJ@
SQLITE3_LIBS = @SQLITE3_LIBS@

GETADDRINFO_A_LIBS = @GETADDRINFO_A_LIBS@

LCMS2_LIBS = @LCMS2_LIBS@
LCMS2_CFLAGS = @LCMS2_CFLAGS@

LIBZ = @LIBZ@

## system-specific libs for dynamic modules, else empty
LIBMODULES = @LIBMODULES@
## emacs-module.o if modules enabled, else empty
MODULES_OBJ = @MODULES_OBJ@

XRANDR_LIBS = @XRANDR_LIBS@
XRANDR_CFLAGS = @XRANDR_CFLAGS@

XINERAMA_LIBS = @XINERAMA_LIBS@
XINERAMA_CFLAGS = @XINERAMA_CFLAGS@

XFIXES_LIBS = @XFIXES_LIBS@
XFIXES_CFLAGS = @XFIXES_CFLAGS@

XINPUT_LIBS = @XINPUT_LIBS@
XINPUT_CFLAGS = @XINPUT_CFLAGS@

XSYNC_LIBS = @XSYNC_LIBS@
XSYNC_CFLAGS = @XSYNC_CFLAGS@

XDBE_LIBS = @XDBE_LIBS@
XDBE_CFLAGS = @XDBE_CFLAGS@

XCOMPOSITE_LIBS = @XCOMPOSITE_LIBS@
XCOMPOSITE_CFLAGS = @XCOMPOSITE_CFLAGS@

XSHAPE_LIBS = @XSHAPE_LIBS@
XSHAPE_CFLAGS = @XSHAPE_CFLAGS@

## widget.o if USE_X_TOOLKIT, otherwise empty.
WIDGET_OBJ=@WIDGET_OBJ@

HYBRID_MALLOC = @HYBRID_MALLOC@

## cygw32.o if CYGWIN, otherwise empty.
CYGWIN_OBJ=@CYGWIN_OBJ@

## fontset.o fringe.o image.o if we have any window system
WINDOW_SYSTEM_OBJ=@WINDOW_SYSTEM_OBJ@

NS_OBJ=@NS_OBJ@
## nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o ns_fontfile if HAVE_NS.
NS_OBJC_OBJ=@NS_OBJC_OBJ@
## Used only for GNUstep.
GNU_OBJC_CFLAGS=$(patsubst -specs=%-hardened-cc1,,@GNU_OBJC_CFLAGS@)
## w32fns.o w32menu.c w32reg.o fringe.o fontset.o w32font.o w32term.o
## w32xfns.o w32select.o image.o w32uniscribe.o w32cygwinx.o if HAVE_W32,
## w32cygwinx.o if CYGWIN but not HAVE_W32, else empty.
W32_OBJ=@W32_OBJ@
## -lkernel32 -luser32 -lusp10 -lgdi32 -lole32 -lcomdlg32 -lcomctl32
## -lwinspool if HAVE_W32,
## -lkernel32 if CYGWIN but not HAVE_W32, else empty.
W32_LIBS=@W32_LIBS@

PGTK_OBJ=@PGTK_OBJ@
PGTK_LIBS=@PGTK_LIBS@
PROCESS_OBJ=@PROCESS_OBJ@

## emacs.res if HAVE_W32
EMACSRES = @EMACSRES@
## If HAVE_W32, compiler arguments for including
## the resource file in the binary.
## Cygwin: -Wl,emacs.res
## MinGW: emacs.res
W32_RES_LINK=@W32_RES_LINK@

## Empty if !HAVE_X_WINDOWS
## xfont.o ftfont.o xftfont.o if HAVE_XFT
## xfont.o ftfont.o if HAVE_FREETYPE
## xfont.o ftfont.o ftcrfont.o if USE_CAIRO
## else xfont.o
## if HAVE_HARFBUZZ, hbfont.o is added regardless of the rest
FONT_OBJ=@FONT_OBJ@

## Empty for MinGW, cm.o for the rest.
CM_OBJ=@CM_OBJ@

LIBGPM = @LIBGPM@

LIBSELINUX_LIBS = @LIBSELINUX_LIBS@

LIBGNUTLS_LIBS = @LIBGNUTLS_LIBS@
LIBGNUTLS_CFLAGS = @LIBGNUTLS_CFLAGS@

LIBSYSTEMD_LIBS = @LIBSYSTEMD_LIBS@
LIBSYSTEMD_CFLAGS = @LIBSYSTEMD_CFLAGS@

TREE_SITTER_LIBS = @TREE_SITTER_LIBS@
TREE_SITTER_CFLAGS = @TREE_SITTER_CFLAGS@
TREE_SITTER_OBJ = @TREE_SITTER_OBJ@

SQLITE3_LIBS = @SQLITE3_LIBS@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_OBJ = @SQLITE3_OBJ@

INTERVALS_H = dispextern.h intervals.h composite.h

GETLOADAVG_LIBS = @GETLOADAVG_LIBS@

LIBGMP = @LIBGMP@

LIBGCCJIT_LIBS = @LIBGCCJIT_LIBS@
LIBGCCJIT_CFLAGS = @LIBGCCJIT_CFLAGS@

## dynlib.o if necessary, else empty
DYNLIB_OBJ = @DYNLIB_OBJ@

# Whether builds should contain details. '--no-build-details' or empty.
BUILD_DETAILS = @BUILD_DETAILS@

HAIKU_OBJ = @HAIKU_OBJ@
HAIKU_CXX_OBJ = @HAIKU_CXX_OBJ@
HAIKU_LIBS = @HAIKU_LIBS@
HAIKU_CFLAGS = @HAIKU_CFLAGS@

CHECK_STRUCTS = @CHECK_STRUCTS@

HAVE_BE_APP = @HAVE_BE_APP@

## ARM Macs require that all code have a valid signature.  Since pdump
## invalidates the signature, we must re-sign to fix it.
DO_CODESIGN=$(patsubst aarch64-apple-darwin%,yes,@configuration@)

-include ${top_builddir}/src/verbose.mk
-include ${top_builddir}/src/compile.mk

# Flags that might be in WARN_CFLAGS but are not valid for Objective C.
NON_OBJC_CFLAGS = -Wignored-attributes -Wignored-qualifiers -Wopenmp-simd \
  -Wnested-externs -Wstrict-flex-arrays
# Ditto, but for C++.
NON_CXX_CFLAGS = -Wmissing-prototypes -Wnested-externs -Wold-style-definition \
  -Wstrict-prototypes -Wno-override-init

# -Demacs makes some files produce the correct version for use in Emacs.
# MYCPPFLAGS is for by-hand Emacs-specific overrides, e.g.,
# "make MYCPPFLAGS='-DDBUS_DEBUG'".
EMACS_CFLAGS=-Demacs $(MYCPPFLAGS) -I. -I$(srcdir) \
  -I$(lib) -I../lib \
  $(C_SWITCH_MACHINE) $(C_SWITCH_SYSTEM) $(C_SWITCH_X_SITE) \
  $(GNUSTEP_CFLAGS) $(CFLAGS_SOUND) $(RSVG_CFLAGS) $(IMAGEMAGICK_CFLAGS) \
  $(PNG_CFLAGS) $(LIBXML2_CFLAGS) $(LIBGCCJIT_CFLAGS) $(DBUS_CFLAGS) \
  $(XRANDR_CFLAGS) $(XINERAMA_CFLAGS) $(XFIXES_CFLAGS) $(XDBE_CFLAGS) \
  $(XINPUT_CFLAGS) $(WEBP_CFLAGS) $(WEBKIT_CFLAGS) $(LCMS2_CFLAGS) \
  $(SETTINGS_CFLAGS) $(FREETYPE_CFLAGS) $(FONTCONFIG_CFLAGS) \
  $(HARFBUZZ_CFLAGS) $(LIBOTF_CFLAGS) $(M17N_FLT_CFLAGS) $(DEPFLAGS) \
  $(LIBSYSTEMD_CFLAGS) $(TREE_SITTER_CFLAGS) \
  $(LIBGNUTLS_CFLAGS) $(NOTIFY_CFLAGS) $(CAIRO_CFLAGS) $(SQLITE3_CFLAGS) \
  $(WERROR_CFLAGS) $(HAIKU_CFLAGS) $(XCOMPOSITE_CFLAGS)
ALL_CFLAGS = $(EMACS_CFLAGS) $(WARN_CFLAGS) $(CFLAGS)
ALL_OBJC_CFLAGS = $(EMACS_CFLAGS) \
  $(filter-out $(NON_OBJC_CFLAGS),$(WARN_CFLAGS)) $(CFLAGS) \
  $(GNU_OBJC_CFLAGS)
ALL_CXX_CFLAGS = $(EMACS_CFLAGS) \
  $(filter-out $(NON_CXX_CFLAGS),$(WARN_CFLAGS)) $(CXXFLAGS)

.SUFFIXES: .m .cc
.c.o:
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $(PROFILING_CFLAGS) $<
.m.o:
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_OBJC_CFLAGS) $(PROFILING_CFLAGS) $<
.cc.o:
	$(AM_V_CXX)$(CXX) -c $(CPPFLAGS) $(ALL_CXX_CFLAGS) $(PROFILING_CFLAGS) $<

## lastfile must follow all files whose initialized data areas should
## be dumped as pure by dump-emacs.
base_obj = dispnew.o frame.o scroll.o xdisp.o menu.o $(XMENU_OBJ) window.o     \
        charset.o coding.o category.o ccl.o character.o chartab.o bidi.o       \
        $(CM_OBJ) term.o terminal.o xfaces.o $(XOBJ) $(GTK_OBJ) $(DBUS_OBJ)    \
        emacs.o keyboard.o macros.o keymap.o sysdep.o                          \
        bignum.o buffer.o filelock.o insdel.o marker.o                         \
        minibuf.o fileio.o dired.o                                             \
        cmds.o casetab.o casefiddle.o indent.o search.o regex-emacs.o undo.o   \
        alloc.o mem_node.o pdumper_write.o pdumper_read.o                      \
        data.o doc.o editfns.o callint.o                                       \
        eval.o floatfns.o fns.o sort.o font.o print.o lread.o $(MODULES_OBJ)   \
        syntax.o bytecode.o comp.o $(DYNLIB_OBJ)                               \
        process.o gnutls.o callproc.o                                          \
        region-cache.o sound.o timefns.o atimer.o                              \
        doprnt.o intervals.o textprop.o composite.o xml.o lcms.o $(NOTIFY_OBJ) \
        $(XWIDGETS_OBJ)                                                        \
        profiler.o decompress.o                                                \
        thread.o systhread.o                                                   \
        itree.o json.o                                                         \
        $(if $(HYBRID_MALLOC),sheap.o)                                         \
        $(NS_OBJ) $(CYGWIN_OBJ) $(FONT_OBJ)                                    \
        $(W32_OBJ) $(WINDOW_SYSTEM_OBJ) $(XGSELOBJ)                            \
        $(HAIKU_OBJ)                                                           \
        $(SQLITE3_OBJ)                                                         \
        $(TREE_SITTER_OBJ)
doc_obj = $(base_obj) $(NS_OBJC_OBJ)
obj = $(doc_obj) $(HAIKU_CXX_OBJ)

## Object files used on some machine or other.
## These go in the DOC file on all machines in case they are needed.
## Some of them have no DOC entries, but it does no harm to have them
## in the list, in case they ever add any such entries.
SOME_MACHINE_OBJECTS = dosfns.o msdos.o \
  xterm.o xfns.o xmenu.o xselect.o xrdb.o xsmfns.o fringe.o image.o \
  fontset.o dbusbind.o cygw32.o \
  nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o nsfont.o macfont.o \
  nsxwidget.o \
  w32.o w32console.o w32cygwinx.o w32fns.o w32heap.o w32inevt.o w32notify.o \
  w32menu.o w32proc.o w32reg.o w32select.o w32term.o w32xfns.o \
  w16select.o widget.o xfont.o ftfont.o xftfont.o gtkutil.o \
  xsettings.o xgselect.o termcap.o hbfont.o \
  haikuterm.o haikufns.o haikumenu.o haikufont.o

SYSTEM_TYPE = @SYSTEM_TYPE@

## gmalloc.o if !SYSTEM_MALLOC && !DOUG_LEA_MALLOC, else empty.
GMALLOC_OBJ=@GMALLOC_OBJ@

## vm-limit.o if !SYSTEM_MALLOC, else empty.
VMLIMIT_OBJ=@VMLIMIT_OBJ@

## ralloc.o if !SYSTEM_MALLOC && REL_ALLOC, else empty.
RALLOC_OBJ=@RALLOC_OBJ@

## Empty on Cygwin and MinGW, lastfile.o elsewhere.
PRE_ALLOC_OBJ=@PRE_ALLOC_OBJ@
## lastfile.o on Cygwin and MinGW, empty elsewhere.
POST_ALLOC_OBJ=@POST_ALLOC_OBJ@

## List of object files that make-docfile should not be told about.
otherobj= $(TERMCAP_OBJ) $(PRE_ALLOC_OBJ) $(GMALLOC_OBJ) $(RALLOC_OBJ) \
  $(POST_ALLOC_OBJ) $(WIDGET_OBJ) $(LIBOBJS)

## $(VMLIMIT_OBJ) should be first linked object file.
## (On MinGW, firstfile.o should be before vm-limit.o.)
FIRSTFILE_OBJ=@FIRSTFILE_OBJ@
ALLOBJS = $(FIRSTFILE_OBJ) $(VMLIMIT_OBJ) $(obj) $(otherobj)

ifeq ($(HAVE_NATIVE_COMP),yes)
TARGET_EXT = eln
else
TARGET_EXT = elc
endif

.PHONY: all
all: emacs.pdmp

ifeq ($(HAVE_BE_APP),yes)
all: Emacs Emacs.pdmp
Emacs: emacs$(EXEEXT) $(libsrc)/be-resources
	$(AM_V_GEN)cp -f emacs$(EXEEXT) $@
	$(AM_V_at)$(libsrc)/be-resources \
	  $(etc)/images/icons/hicolor/32x32/apps/emacs.png $@
Emacs.pdmp: emacs.pdmp
	$(AM_V_GEN)cp -f $< $@
endif

bootstrap-emacs$(EXEEXT): | emacs$(EXEEXT)
	@# symlink preferred but for mingw
	cp -f $(firstword $|) $@

../lisp/international/charprop.el: | bootstrap-emacs.pdmp
	$(MAKE) -C ../admin/unidata all EMACS=../../src/bootstrap-emacs$(EXEEXT)

../lisp/loaddefs.elc: | bootstrap-emacs.pdmp
	$(MAKE) -C ../lisp autoloads EMACS=../src/bootstrap-emacs$(EXEEXT)
	$(MAKE) -C ../lisp loaddefs.elc EMACS=../src/bootstrap-emacs$(EXEEXT)

define pdump
	$(AM_V_at)rm -f $(1)
	LC_ALL=C ../src/$(1:.pdmp=)$(EXEEXT) --batch $(BUILD_DETAILS) \
	  -l ../admin/$(1:emacs.pdmp=pdump) --pdump-write=$(1)
endef

define relative-lisp-files
	[ -s "../src/$(basename $(1)).pdmp" ] && \
	   ../src/$(1) --batch \
	   --eval "(setq untouched load-history)" \
	   -l ../admin/relative-lisp-files \
	   --eval "(relative-lisp-files $(2) untouched)"
endef

../lisp/subdirs.el:
	$(MAKE) -C ../lisp subdirs.el

bootstrap-emacs.pdmp: bootstrap-emacs$(EXEEXT) ../lisp/subdirs.el ../admin/bootstrap-pdump.el ../admin/pdump-common.el
	$(MAKE) -C ../lisp bootstrap-clean EMACS=../src/$<
	$(call pdump,$@) # pdmp all interpreted elisp
	$(MAKE) -C ../lisp `$(call relative-lisp-files,$<,\"elc\")` EMACS=../src/$<
	$(call pdump,$@) # pdmp all byte-compiled

.SECONDEXPANSION:
emacs.pdmp: emacs$(EXEEXT) ../lisp/subdirs.el \
  ../admin/pdump.el ../admin/pdump-common.el \
  ../lisp/loaddefs.elc \
  ../lisp/international/charprop.el \
  $(patsubst %,../lisp/%.el,$(shell $(call relative-lisp-files,bootstrap-emacs$(EXEEXT),nil)))
	$(call pdump,$@) # pdmp some interpreted elisp
	@# if relative-lisp-files empty, .DEFAULT_GOAL=none
	$(MAKE) .DEFAULT_GOAL=none -C ../lisp `$(call relative-lisp-files,$<,\"$(TARGET_EXT)\")`
	$(call pdump,$@) # pdmp all native- or byte-compiled

install-emacs.pdmp: emacs.pdmp ../admin/install-pdump.el ../admin/pdump-common.el
	$(AM_V_at)rm -f install-emacs$(EXEEXT)
	$(AM_V_at)cp -f emacs$(EXEEXT) install-emacs$(EXEEXT)
	$(call pdump,$@)
	$(AM_V_at)rm -f install-emacs$(EXEEXT)

dmpstruct_headers=$(srcdir)/lisp.h $(srcdir)/buffer.h $(srcdir)/itree.h \
	$(srcdir)/intervals.h $(srcdir)/charset.h $(srcdir)/bignum.h
ifeq ($(CHECK_STRUCTS),true)
pdumper_write.o: dmpstruct.h
endif
dmpstruct.h: $(srcdir)/dmpstruct.awk
dmpstruct.h: $(libsrc)/make-fingerprint$(EXEEXT) $(dmpstruct_headers)
	$(AM_V_GEN)POSIXLY_CORRECT=1 awk -f $(srcdir)/dmpstruct.awk \
		$(dmpstruct_headers) > $@

AUTO_DEPEND = @AUTO_DEPEND@
DEPDIR = deps
ifeq ($(AUTO_DEPEND),yes)
DEPFLAGS = -MMD -MF $(DEPDIR)/$*.d -MP
-include $(ALLOBJS:%.o=$(DEPDIR)/%.d)
else
DEPFLAGS =
include $(srcdir)/deps.mk
endif

## Construct full set of libraries to be linked.
ALLLIBS = $(LIBS) $(W32_LIBS) $(LIBS_GNUSTEP) $(PGTK_LIBS) $(LIBX_BASE) $(LIBIMAGE) \
   $(LIBX_OTHER) $(LIBSOUND) \
   $(RSVG_LIBS) $(IMAGEMAGICK_LIBS) $(LIB_ACL) $(CLOCK_TIME_LIB) \
   $(NANOSLEEP_LIB) $(QCOPY_ACL_LIB) $(WEBKIT_LIBS) \
   $(EUIDACCESS_LIBGEN) $(TIMER_TIME_LIB) $(DBUS_LIBS) \
   $(LIB_EXECINFO) $(XRANDR_LIBS) $(XINERAMA_LIBS) $(XFIXES_LIBS) \
   $(XDBE_LIBS) $(XSYNC_LIBS) $(TREE_SITTER_LIBS) \
   $(LIBXML2_LIBS) $(LIBGPM) $(LIBS_SYSTEM) $(CAIRO_LIBS) \
   $(LIBS_TERMCAP) $(GETLOADAVG_LIBS) $(SETTINGS_LIBS) $(LIBSELINUX_LIBS) \
   $(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(HARFBUZZ_LIBS) $(LIBOTF_LIBS) $(M17N_FLT_LIBS) \
   $(LIBGNUTLS_LIBS) $(LIB_PTHREAD) $(GETADDRINFO_A_LIBS) $(LCMS2_LIBS) \
   $(NOTIFY_LIBS) $(LIB_MATH) $(LIBZ) $(LIBMODULES) $(LIBSYSTEMD_LIBS) \
   $(LIBGMP) $(LIBGCCJIT_LIBS) $(XINPUT_LIBS) $(HAIKU_LIBS) \
   $(SQLITE3_LIBS) $(XCOMPOSITE_LIBS) $(XSHAPE_LIBS)

../lisp/international/charscript.el:
	$(MAKE) -C ../admin/unidata ../$@

../admin/charsets/charsets.stamp:
	$(MAKE) -C ../admin/charsets all

../lisp/international/emoji-zwj.el:
	$(MAKE) -C ../admin/unidata ../$@

emacs$(EXEEXT): $(LIBXMENU) $(ALLOBJS) $(LIBEGNU_ARCHIVE) $(EMACSRES) \
  ../admin/charsets/charsets.stamp \
  ../lisp/international/charscript.el \
  ../lisp/international/emoji-zwj.el \
  $(libsrc)/make-fingerprint$(EXEEXT) $(etc)/DOC
ifeq ($(HAVE_BE_APP),yes)
	$(AM_V_CXXLD)$(CXX) -o $@.tmp \
	  $(ALL_CFLAGS) $(EMACS_LDFLAGS) $(LDFLAGS) \
	  $(ALLOBJS) $(LIBEGNU_ARCHIVE) $(W32_RES_LINK) $(ALLLIBS) -lstdc++
else
	$(AM_V_CCLD)$(CC) -o $@.tmp \
	  $(ALL_CFLAGS) $(CXXFLAGS) $(EMACS_LDFLAGS) $(LDFLAGS) \
	  $(ALLOBJS) $(LIBEGNU_ARCHIVE) $(W32_RES_LINK) $(ALLLIBS)
endif
	$(AM_V_at)$(libsrc)/make-fingerprint$(EXEEXT) $@.tmp
ifeq ($(DO_CODESIGN),yes)
	codesign -s - -f $@.tmp
endif
	$(AM_V_at)rm -f $@
	$(AM_V_at)mv $@.tmp $@
ifeq ($(SYSTEM_TYPE),cygwin)
	find ${top_builddir} -name '*.eln' | rebase -v -O -T -
endif

$(etc)/DOC: $(libsrc)/make-docfile$(EXEEXT) $(doc_obj)
	$(AM_V_GEN)$(MKDIR_P) $(etc)
	$(AM_V_at)rm -f $(etc)/DOC
	$(AM_V_at)$(libsrc)/make-docfile -d $(srcdir) \
	  $(SOME_MACHINE_OBJECTS) $(doc_obj) > $(etc)/DOC

$(libsrc)/make-docfile$(EXEEXT) $(libsrc)/make-fingerprint$(EXEEXT): \
  $(lib)/libgnu.a
	$(MAKE) -C $(dir $@) $(notdir $@)

buildobj.h: Makefile
	$(AM_V_GEN)for i in $(ALLOBJS); do \
	  echo "$$i" | sed 's,.*/,,; s/\.obj$$/\.o/; s/^/"/; s/$$/",/' \
	    || exit; \
	done >$@.tmp
	$(AM_V_at)mv $@.tmp $@

GLOBAL_SOURCES = $(base_obj:.o=.c) $(NS_OBJC_OBJ:.o=.m)

globals.h: $(libsrc)/make-docfile$(EXEEXT) $(GLOBAL_SOURCES)
	$(AM_V_GLOBALS)$(libsrc)/make-docfile -d $(srcdir) -g $(doc_obj) > $@

$(ALLOBJS): globals.h

LIBEGNU_ARCHIVE = $(lib)/lib$(if $(HYBRID_MALLOC),e)gnu.a

$(LIBEGNU_ARCHIVE): $(config_h)
	$(MAKE) -C $(dir $@) all

## We have to create $(etc) here because init_cmdargs tests its
## existence when setting Vinstallation_directory (FIXME?).
## This goes on to affect various things, and the emacs binary fails
## to start if Vinstallation_directory has the wrong value.

## The following oldxmenu-related rules are only (possibly) used if
## HAVE_X11 && !USE_GTK, but there is no harm in always defining them.
$(lwlibdir)/liblw.a: $(config_h) globals.h lisp.h
	$(MAKE) -C $(dir $@) $(notdir $@)
$(oldXMenudir)/libXMenu11.a:
	$(MAKE) -C $(dir $@) $(notdir $@)

.PRECIOUS: ../config.status Makefile
../config.status: ../configure.ac ../m4/*.m4
	$(MAKE) -C $(dir $@) $(notdir $@)
Makefile: ../config.status $(srcdir)/Makefile.in
	$(MAKE) -C .. src/$@

doc.o: buildobj.h

emacs.res:
	$(MAKE) -C ../nt ../src/emacs.res

ETAGS = ../lib-src/etags${EXEEXT}

${ETAGS}:
	$(MAKE) -C $(dir $@) $(notdir $@)

# Remove macuvs.h since it'd cause `src/emacs`
# to be built before we can get TAGS.
ctagsfiles1 = $(filter-out ${srcdir}/macuvs.h, $(wildcard ${srcdir}/*.[hc]))
ctagsfiles2 = $(wildcard ${srcdir}/*.m)
ctagsfiles3 = $(wildcard ${srcdir}/*.cc)

## In out-of-tree builds, TAGS are generated in the build dir, like
## other non-bootstrap build products (see Bug#31744).

## This does not need to depend on ../lisp, ../lwlib and ../lib TAGS files,
## because etags "--include" only includes a pointer to the file,
## rather than the file contents.
TAGS: ${ETAGS} $(ctagsfiles1) $(ctagsfiles2)
	$(AM_V_GEN)${ETAGS} --include=../lisp/TAGS --include=$(lwlibdir)/TAGS \
	  --include=$(lib)/TAGS \
	  --regex='{c}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/\1/' \
	  --regex='{c}/[ 	]*DEFVAR_[A-Z_ 	(]+"[^"]+",[ 	]\([A-Za-z0-9_]+\)/\1/' \
	  $(ctagsfiles1) \
	  --regex='{objc}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/\1/' \
	  --regex='{objc}/[ 	]*DEFVAR_[A-Z_ 	(]+"[^"]+",[ 	]\([A-Za-z0-9_]+\)/\1/' \
	  $(ctagsfiles2) \
	  $(ctagsfiles3)

## Arrange to make tags tables for ../lisp, ../lwlib and ../lib,
## which the above TAGS file for the C files includes by reference.
../lisp/TAGS $(lwlibdir)/TAGS $(lib)/TAGS:
	$(MAKE) -C $(dir $@) $(notdir $@) ETAGS="$(ETAGS)"

.PHONY: tags
tags: TAGS ../lisp/TAGS $(lwlibdir)/TAGS $(lib)/TAGS

### Flymake support (for C only)
check-syntax:
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) ${CHK_SOURCES} || true
.PHONY: check-syntax
