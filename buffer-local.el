;; (require 'cl-lib)
;; (defvar-local doomsday 'a)
;; (with-current-buffer "*scratch*"
;;   (setq doomsday 'b)
;;   (cl-assert (special-variable-p 'doomsday))
;;   (cl-assert (eq (buffer-local-value 'doomsday (current-buffer)) 'b))
;;   (cl-assert (eq (default-value 'doomsday) 'a))
;;   (cl-assert (eq doomsday 'b))
;;   (let ((doomsday "let"))
;;     (cl-assert (equal doomsday "let")))
;;   (dotimes (i 5)
;;     (setq doomsday i)
;;     (make-thread (lambda ()
;;                    (with-current-buffer "*scratch*"
;;                      (let ((doomsday "let"))
;;                        (sleep-for (1+ (random 3)))
;;                        (unless (equal doomsday "let")
;;                          (princ (format "failed in thread#%s, var is %s\n"
;;                                         (thread-name (current-thread))
;;                                         doomsday)
;;                                 (function external-debugging-output))))))
;;                  (format "%d" i))
;;     (unless (= doomsday i)
;;       (princ (format "failed in main, var is %s\n" doomsday)
;;              (function external-debugging-output))))
;;   (while (not (zerop (1- (length (all-threads)))))
;;     (accept-process-output nil 0.1)))



(require 'cl-lib)
(defvar-local doomsday "global")
(with-current-buffer "*scratch*"
  (cl-assert (special-variable-p 'doomsday))
  (setq doomsday "local")
  (cl-assert (equal doomsday "local"))
  (let ((doomsday "let"))
    (cl-assert (equal doomsday "let")))
  (dotimes (i 5)
    (setq doomsday (format "local-%d" i))
    (cl-assert (equal doomsday (format "local-%d" i)))
    (make-thread (lambda ()
                   (with-current-buffer "*scratch*"
                     (let ((doomsday "let"))
                       (sleep-for (1+ (random 5)))
                       (princ (format "%s in thread#%s, var is %s\n"
                                      (if (equal doomsday "let")
                                          "succeeded"
                                        "failed")
				      (thread-name (current-thread))
				      doomsday)
			      #'external-debugging-output))))
		 (format "%d" i))
    (when (bound-and-true-p confuse-main) (sleep-for 1))
    (unless (equal doomsday (format "local-%d" i))
      (princ (format "failed in main, var is %s, should be %s\n"
                     doomsday
                     (format "local-%d" i))
             #'external-debugging-output))))
(set-buffer (get-buffer-create "switch"))
(run-at-time t 0.5 #'ignore)
(while (not (zerop (1- (length (all-threads)))))
  (accept-process-output nil 0.1))


;; (require 'cl-lib)
;; (defvar doomsday 'a)
;; (with-current-buffer "*scratch*"
;;   (setq-local doomsday 'b)
;;   (cl-assert (special-variable-p 'doomsday))
;;   (cl-assert (eq (buffer-local-value 'doomsday (get-buffer "*scratch*")) 'b))
;;   (cl-assert (eq (default-value 'doomsday) 'a))
;;   (cl-assert (eq doomsday 'b))
;;   (let ((doomsday "let"))
;;     (cl-assert (equal doomsday "let")))
;;   (make-thread (lambda ()
;;                  (with-current-buffer "*scratch*"
;;                    (sleep-for (1+ (random 3)))
;;                    (setq doomsday 'new)))))
;; (call-interactively #'list-threads)
;; (while (not (zerop (1- (length (all-threads)))))
;;   (accept-process-output nil 0.1))
;; (let ((val (buffer-local-value 'doomsday (get-buffer "*scratch*"))))
;;   (unless (eq 'new val)
;;     (princ (format "doomsday is still %s\n" val)
;;            (function external-debugging-output))))
